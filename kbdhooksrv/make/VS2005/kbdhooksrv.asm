; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	d:\my\C++Projects\Release\DRM_7_05_08\kbdhooksrv\src\kbdhooksrv.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?dwSrvStatus@@3KA				; dwSrvStatus
PUBLIC	?dwHideMode@@3KA				; dwHideMode
PUBLIC	?ssStatus@@3U_SERVICE_STATUS@@A			; ssStatus
PUBLIC	?hEventCtrlMesSend@@3PAXA			; hEventCtrlMesSend
PUBLIC	?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A	; ssHandle
PUBLIC	??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@NKJDKGAH@?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA_?$AAp?$AAa?$AAr?$AAa?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@EGFPMFNB@?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@JHBDMOKK@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAc?$AAc?$AAu?$AAr?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@GFAIDJBN@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@ ; `string'
PUBLIC	??_C@_1BI@DLMANABL@?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@OIEHDFHN@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@PNLGHGLP@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@GJFMKGAN@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA3?$AA2?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IE@MMBDDIDB@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@ ; `string'
PUBLIC	??_C@_1FE@NNBCKJOO@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@ ; `string'
PUBLIC	??_C@_1BO@BLMCGMML@?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_19DKJJGBOC@?$AA?4?$AAs?$AAy?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1BC@IIEEBBFE@?$AAK?$AAb?$AAd?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@FIAKOBIM@?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@ELDDFEIE@?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@EPBGMJAB@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AAF?$AAl?$AAa?$AAg?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@JKPMOCMB@?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@IKAAMAIJ@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GM@MODJIGF@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAL?$AAo?$AAg?$AA?5?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAO?$AAn?$AA?9?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAK@ ; `string'
PUBLIC	??_C@_1DO@EAMPBGHN@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@MFBPFJGE@?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@GIIKAIKM@?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@KKBLPDAK@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAm?$AAs?$AAg?$AAs?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@IEJJHKAO@?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@OIGJAMPI@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA_?$AAa?$AAd?$AAm?$AAi?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@DFHEBLHG@?$AA?$CF?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?$CF?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@LHGOGJDM@?$AA?2?$AAB?$AAG?$AAU?$AA?5?$AAS?$AAo?$AAf?$AAt?$AA?2?$AAK?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?2?$AA?$AA@ ; `string'
PUBLIC	??_C@_1PG@FLADPFAE@?$AAU?$AAs?$AAa?$AAg?$AAe?$AA?3?$AA?5?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?5?$AA?9?$AA?$HL?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv@ ; `string'
PUBLIC	??_C@_1IA@MLFCBHIB@?$AA?9?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1IA@MDNNNGJE@?$AA?9?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1JC@HHCLBLHH@?$AA?9?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa@ ; `string'
PUBLIC	??_C@_1JC@GLGLOMBN@?$AA?9?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd@ ; `string'
PUBLIC	??_C@_1GK@ONDBLGDC@?$AA?9?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1HG@OKPIPPAA@?$AA?9?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAe@ ; `string'
PUBLIC	??_C@_1GO@EBILKFLL@?$AA?9?$AAc?$AAh?$AAe?$AAc?$AAk?$AA_?$AAa?$AAd?$AAm?$AAi?$AAn?$AA?3?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAa?$AAd?$AAm?$AAi?$AAn?$AAi?$AAs?$AAt?$AAr?$AAa?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_1LI@EJAMLLAO@?$AA?9?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA_?$AAp?$AAa?$AAr?$AAa?$AAm?$AA?5?$AAL?$AAo?$AAg?$AAF?$AAi?$AAl?$AAe?$AAF?$AAu?$AAl?$AAl?$AAP?$AAa?$AAt?$AAh?$AA?5?$AAL?$AAo@ ; `string'
PUBLIC	??_C@_1CC@JONFAEOP@?$AAE?$AAv?$AAe?$AAn?$AAt?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@CHOLPGLN@?$AAT?$AAy?$AAp?$AAe?$AAs?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@CPPACLFG@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@ ; `string'
PUBLIC	??_C@_1BG@HOBJFBDD@?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@DDFFCLKH@?$AAL?$AAo?$AAg?$AAF?$AAi?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@BEGECOBP@?$AAH?$AAi?$AAd?$AAe?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@OBIJFLLK@?$AAL?$AAo?$AAg?$AAM?$AAo?$AAd?$AAe?$AA?$AA@ ; `string'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__wtoi:PROC
EXTRN	__imp__StartServiceCtrlDispatcherW@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__CreateEventW@16:PROC
EXTRN	__imp__RegisterServiceCtrlHandlerW@8:PROC
EXTRN	__imp_?InitKbdHook@@YGHPB_WW4_LOG_MODE@@@Z:PROC
EXTRN	__imp_?StartLog@@YGHXZ:PROC
EXTRN	__imp_?StopLog@@YGHXZ:PROC
EXTRN	__imp_?UnInitKbdHook@@YGHXZ:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__OutputDebugStringW@4:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	__imp__SetServiceStatus@8:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	__imp__GetProcessHeap@0:PROC
EXTRN	__imp__RegQueryValueExW@24:PROC
EXTRN	__imp__DeregisterEventSource@4:PROC
EXTRN	__imp__RegisterEventSourceW@8:PROC
EXTRN	__imp__ReportEventW@36:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__ChangeServiceConfigW@44:PROC
EXTRN	__imp__CreateServiceW@52:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__CloseServiceHandle@4:PROC
EXTRN	__imp__ControlService@12:PROC
EXTRN	__imp__DeleteService@4:PROC
EXTRN	__imp__OpenSCManagerW@12:PROC
EXTRN	__imp__OpenServiceW@12:PROC
EXTRN	__imp__QueryServiceStatus@8:PROC
EXTRN	__imp__lstrcmpiW@8:PROC
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__RegDeleteKeyW@8:PROC
EXTRN	__imp__lstrcatW@8:PROC
EXTRN	__imp__ExpandEnvironmentStringsW@12:PROC
EXTRN	_wprintf:PROC
EXTRN	__imp__RegCreateKeyExW@36:PROC
EXTRN	__imp__AllocateAndInitializeSid@44:PROC
EXTRN	__imp__FreeSid@4:PROC
EXTRN	__imp__CheckTokenMembership@12:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegCreateKeyW@12:PROC
EXTRN	__imp__RegOpenKeyExW@20:PROC
EXTRN	__imp__RegSetValueExW@24:PROC
?dwSrvStatus@@3KA DD 01H DUP (?)			; dwSrvStatus
?dwHideMode@@3KA DD 01H DUP (?)				; dwHideMode
?ssStatus@@3U_SERVICE_STATUS@@A DB 01cH DUP (?)		; ssStatus
?hEventCtrlMesSend@@3PAXA DD 01H DUP (?)		; hEventCtrlMesSend
?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A DD 01H DUP (?) ; ssHandle
;	COMDAT ??_C@_1BA@OBIJFLLK@?$AAL?$AAo?$AAg?$AAM?$AAo?$AAd?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@OBIJFLLK@?$AAL?$AAo?$AAg?$AAM?$AAo?$AAd?$AAe?$AA?$AA@ DB 'L', 00H
	DB	'o', 00H, 'g', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@BEGECOBP@?$AAH?$AAi?$AAd?$AAe?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@BEGECOBP@?$AAH?$AAi?$AAd?$AAe?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$AA@ DB 'H'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@DDFFCLKH@?$AAL?$AAo?$AAg?$AAF?$AAi?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@DDFFCLKH@?$AAL?$AAo?$AAg?$AAF?$AAi?$AAl?$AAe?$AA?$AA@ DB 'L', 00H
	DB	'o', 00H, 'g', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@HOBJFBDD@?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@HOBJFBDD@?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAs?$AA?$AA@ DB 'p'
	DB	00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@CPPACLFG@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@
CONST	SEGMENT
??_C@_1FK@CPPACLFG@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@ DB 'S'
	DB	00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, '\', 00H
	DB	'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'l', 00H, 'S', 00H, 'e', 00H, 't', 00H, '\', 00H, 'S', 00H, 'e'
	DB	00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'k', 00H, 'b', 00H, 'd', 00H, 'h', 00H, 'o', 00H, 'o'
	DB	00H, 'k', 00H, 's', 00H, 'r', 00H, 'v', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@CHOLPGLN@?$AAT?$AAy?$AAp?$AAe?$AAs?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@CHOLPGLN@?$AAT?$AAy?$AAp?$AAe?$AAs?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?$AA@ DB 'T'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, 'S', 00H, 'u', 00H
	DB	'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'd'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@JONFAEOP@?$AAE?$AAv?$AAe?$AAn?$AAt?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@JONFAEOP@?$AAE?$AAv?$AAe?$AAn?$AAt?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?$AA@ DB 'E'
	DB	00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'M', 00H, 'e', 00H
	DB	's', 00H, 's', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1LI@EJAMLLAO@?$AA?9?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA_?$AAp?$AAa?$AAr?$AAa?$AAm?$AA?5?$AAL?$AAo?$AAg?$AAF?$AAi?$AAl?$AAe?$AAF?$AAu?$AAl?$AAl?$AAP?$AAa?$AAt?$AAh?$AA?5?$AAL?$AAo@
CONST	SEGMENT
??_C@_1LI@EJAMLLAO@?$AA?9?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA_?$AAp?$AAa?$AAr?$AAa?$AAm?$AA?5?$AAL?$AAo?$AAg?$AAF?$AAi?$AAl?$AAe?$AAF?$AAu?$AAl?$AAl?$AAP?$AAa?$AAt?$AAh?$AA?5?$AAL?$AAo@ DB '-'
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'_', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' '
	DB	00H, 'L', 00H, 'o', 00H, 'g', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'F', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'P', 00H, 'a'
	DB	00H, 't', 00H, 'h', 00H, ' ', 00H, 'L', 00H, 'o', 00H, 'g', 00H
	DB	'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'L', 00H, 'o'
	DB	00H, 'g', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'u', 00H
	DB	's', 00H, ':', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, 't', 00H, 'e', 00H, 'r', 00H, 's'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, 'r', 00H, 'y', 00H, 0aH, 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@EBILKFLL@?$AA?9?$AAc?$AAh?$AAe?$AAc?$AAk?$AA_?$AAa?$AAd?$AAm?$AAi?$AAn?$AA?3?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAa?$AAd?$AAm?$AAi?$AAn?$AAi?$AAs?$AAt?$AAr?$AAa?$AAt?$AAo@
CONST	SEGMENT
??_C@_1GO@EBILKFLL@?$AA?9?$AAc?$AAh?$AAe?$AAc?$AAk?$AA_?$AAa?$AAd?$AAm?$AAi?$AAn?$AA?3?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAa?$AAd?$AAm?$AAi?$AAn?$AAi?$AAs?$AAt?$AAr?$AAa?$AAt?$AAo@ DB '-'
	DB	00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '_', 00H
	DB	'a', 00H, 'd', 00H, 'm', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' '
	DB	00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'a', 00H, 'd', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, 'k', 00H, 'e', 00H, 'n', 00H
	DB	' ', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@OKPIPPAA@?$AA?9?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAe@
CONST	SEGMENT
??_C@_1HG@OKPIPPAA@?$AA?9?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAe@ DB '-'
	DB	00H, 'u', 00H, 'n', 00H, 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's', 00H, 'o'
	DB	00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, ':', 00H, ' ', 00H
	DB	'u', 00H, 'n', 00H, 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'y', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@ONDBLGDC@?$AA?9?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1GK@ONDBLGDC@?$AA?9?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt@ DB '-'
	DB	00H, 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'e', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, 'r', 00H, 'y', 00H, 0aH, 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@GLGLOMBN@?$AA?9?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd@
CONST	SEGMENT
??_C@_1JC@GLGLOMBN@?$AA?9?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd@ DB '-'
	DB	00H, 'r', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H
	DB	'_', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, ':', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'k', 00H, 'e', 00H, 'y'
	DB	00H, 'b', 00H, 'o', 00H, 'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H
	DB	' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 'r', 00H, ' ', 00H, 's'
	DB	00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@HHCLBLHH@?$AA?9?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa@
CONST	SEGMENT
??_C@_1JC@HHCLBLHH@?$AA?9?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa@ DB '-'
	DB	00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, '_', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i'
	DB	00H, 'c', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'k'
	DB	00H, 'e', 00H, 'y', 00H, 'b', 00H, 'o', 00H, 'a', 00H, 'r', 00H
	DB	'd', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v'
	DB	00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 'r', 00H, ' ', 00H, 's'
	DB	00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1IA@MDNNNGJE@?$AA?9?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1IA@MDNNNGJE@?$AA?9?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5@ DB '-'
	DB	00H, 'r', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H
	DB	'_', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, ' ', 00H, 'k', 00H, 'e', 00H, 'y', 00H, 'b'
	DB	00H, 'o', 00H, 'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'd'
	DB	00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H, ' ', 00H, 'y', 00H, 'o'
	DB	00H, 'u', 00H, 'r', 00H, ' ', 00H, 's', 00H, 'y', 00H, 's', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IA@MLFCBHIB@?$AA?9?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr@
CONST	SEGMENT
??_C@_1IA@MLFCBHIB@?$AA?9?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr@ DB '-'
	DB	00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, '_', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, ':', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'k', 00H, 'e'
	DB	00H, 'y', 00H, 'b', 00H, 'o', 00H, 'a', 00H, 'r', 00H, 'd', 00H
	DB	' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'y', 00H, 'o'
	DB	00H, 'u', 00H, 'r', 00H, ' ', 00H, 's', 00H, 'y', 00H, 's', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1PG@FLADPFAE@?$AAU?$AAs?$AAa?$AAg?$AAe?$AA?3?$AA?5?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?5?$AA?9?$AA?$HL?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv@
CONST	SEGMENT
??_C@_1PG@FLADPFAE@?$AAU?$AAs?$AAa?$AAg?$AAe?$AA?3?$AA?5?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?5?$AA?9?$AA?$HL?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv@ DB 'U'
	DB	00H, 's', 00H, 'a', 00H, 'g', 00H, 'e', 00H, ':', 00H, ' ', 00H
	DB	'k', 00H, 'b', 00H, 'd', 00H, 'h', 00H, 'o', 00H, 'o', 00H, 'k'
	DB	00H, 's', 00H, 'r', 00H, 'v', 00H, ' ', 00H, '-', 00H, '{', 00H
	DB	'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, '_', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, '|', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'o', 00H, 'v', 00H, 'e', 00H, '_', 00H, 'd', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '|', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, '_', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i'
	DB	00H, 'c', 00H, 'e', 00H, ' ', 00H, '|', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '_', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, '|', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, '}', 00H, 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@LHGOGJDM@?$AA?2?$AAB?$AAG?$AAU?$AA?5?$AAS?$AAo?$AAf?$AAt?$AA?2?$AAK?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?2?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@LHGOGJDM@?$AA?2?$AAB?$AAG?$AAU?$AA?5?$AAS?$AAo?$AAf?$AAt?$AA?2?$AAK?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?2?$AA?$AA@ DB '\'
	DB	00H, 'B', 00H, 'G', 00H, 'U', 00H, ' ', 00H, 'S', 00H, 'o', 00H
	DB	'f', 00H, 't', 00H, '\', 00H, 'K', 00H, 'b', 00H, 'd', 00H, 'h'
	DB	00H, 'o', 00H, 'o', 00H, 'k', 00H, 's', 00H, 'r', 00H, 'v', 00H
	DB	'\', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@DFHEBLHG@?$AA?$CF?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?$CF?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@DFHEBLHG@?$AA?$CF?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?$CF?$AA?$AA@ DB '%'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H, 'r', 00H, 'a', 00H
	DB	'm', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 's', 00H, '%'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@OIGJAMPI@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA_?$AAa?$AAd?$AAm?$AAi?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@OIGJAMPI@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA_?$AAa?$AAd?$AAm?$AAi?$AAn?$AA?$AA@ DB 'c'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'a', 00H
	DB	'd', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@IEJJHKAO@?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@IEJJHKAO@?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ DB 'u'
	DB	00H, 'n', 00H, 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@KKBLPDAK@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAm?$AAs?$AAg?$AAs?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@KKBLPDAK@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAm?$AAs?$AAg?$AAs?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'k'
	DB	00H, 'b', 00H, 'd', 00H, 'h', 00H, 'o', 00H, 'o', 00H, 'k', 00H
	DB	'm', 00H, 's', 00H, 'g', 00H, 's', 00H, '.', 00H, 'd', 00H, 'l'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@GIIKAIKM@?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@GIIKAIKM@?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MFBPFJGE@?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MFBPFJGE@?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@EAMPBGHN@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@EAMPBGHN@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ DB 'K'
	DB	00H, 'e', 00H, 'y', 00H, 'b', 00H, 'o', 00H, 'a', 00H, 'r', 00H
	DB	'd', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, ' ', 00H, 'S', 00H, 'e', 00H, 'r', 00H, 'v'
	DB	00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@MODJIGF@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAL?$AAo?$AAg?$AA?5?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAO?$AAn?$AA?9?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAK@
CONST	SEGMENT
??_C@_1GM@MODJIGF@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAL?$AAo?$AAg?$AA?5?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAO?$AAn?$AA?9?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAK@ DB 'K'
	DB	00H, 'e', 00H, 'y', 00H, 'b', 00H, 'o', 00H, 'a', 00H, 'r', 00H
	DB	'd', 00H, ' ', 00H, 'L', 00H, 'o', 00H, 'g', 00H, ' ', 00H, 'S'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, 'O', 00H, 'n', 00H, '-', 00H, 'A', 00H, 'c', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, 'e', 00H
	DB	'y', 00H, 'b', 00H, 'o', 00H, 'a', 00H, 'r', 00H, 'd', 00H, ' '
	DB	00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@IKAAMAIJ@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@IKAAMAIJ@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@ DB 'k'
	DB	00H, 'b', 00H, 'd', 00H, 'h', 00H, 'o', 00H, 'o', 00H, 'k', 00H
	DB	's', 00H, 'r', 00H, 'v', 00H, '.', 00H, 'e', 00H, 'x', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@JKPMOCMB@?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@JKPMOCMB@?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'_', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@EPBGMJAB@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AAF?$AAl?$AAa?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@EPBGMJAB@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AAF?$AAl?$AAa?$AAg?$AA?$AA@ DB 'D'
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@ELDDFEIE@?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@ELDDFEIE@?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, '_', 00H
	DB	'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@FIAKOBIM@?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1O@FIAKOBIM@?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AA@ DB 'F', 00H, 'i'
	DB	00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@IIEEBBFE@?$AAK?$AAb?$AAd?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@IIEEBBFE@?$AAK?$AAb?$AAd?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$AA@ DB 'K'
	DB	00H, 'b', 00H, 'd', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19DKJJGBOC@?$AA?4?$AAs?$AAy?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19DKJJGBOC@?$AA?4?$AAs?$AAy?$AAs?$AA?$AA@ DB '.', 00H, 's', 00H, 'y'
	DB	00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@BLMCGMML@?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@BLMCGMML@?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'_', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@NNBCKJOO@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@
CONST	SEGMENT
??_C@_1FE@NNBCKJOO@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@ DB 'S'
	DB	00H, 'Y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M', 00H, '\', 00H
	DB	'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'l', 00H, 'S', 00H, 'e', 00H, 't', 00H, '\', 00H, 'S', 00H, 'e'
	DB	00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'k', 00H, 'b', 00H, 'd', 00H, 'h', 00H, 'o', 00H, 'o'
	DB	00H, 'k', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1IE@MMBDDIDB@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@
CONST	SEGMENT
??_C@_1IE@MMBDDIDB@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@ DB 'S'
	DB	00H, 'Y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M', 00H, '\', 00H
	DB	'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'l', 00H, 'S', 00H, 'e', 00H, 't', 00H, '\', 00H, 'S', 00H, 'e'
	DB	00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'L'
	DB	00H, 'o', 00H, 'g', 00H, '\', 00H, 'A', 00H, 'p', 00H, 'p', 00H
	DB	'l', 00H, 'i', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'k', 00H, 'b', 00H, 'd', 00H, 'h', 00H
	DB	'o', 00H, 'o', 00H, 'k', 00H, 's', 00H, 'r', 00H, 'v', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@GJFMKGAN@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA3?$AA2?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@GJFMKGAN@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA3?$AA2?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AA?$AA@ DB 'S'
	DB	00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, '3', 00H
	DB	'2', 00H, '\', 00H, 'D', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, 's', 00H, '\', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@PNLGHGLP@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@PNLGHGLP@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@ DB 'K'
	DB	00H, 'e', 00H, 'y', 00H, 'b', 00H, 'o', 00H, 'a', 00H, 'r', 00H
	DB	'd', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@OIEHDFHN@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@OIEHDFHN@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AA?$AA@ DB 'k', 00H
	DB	'b', 00H, 'd', 00H, 'h', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@DLMANABL@?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@DLMANABL@?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'D'
	DB	00H, 'e', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@GFAIDJBN@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@
CONST	SEGMENT
??_C@_1EG@GFAIDJBN@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@ DB 'S'
	DB	00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, '\', 00H
	DB	'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'l', 00H, 'S', 00H, 'e', 00H, 't', 00H, '\', 00H, 'S', 00H, 'e'
	DB	00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?wszParamOfHideStatus@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
_DATA	SEGMENT
?wszParamOfHideStatus@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA DB 'H'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 's', 00H, 00H, 00H	; `KbdSrvQueryRegStartParam'::`2'::wszParamOfHideStatus
_DATA	ENDS
;	COMDAT ?wszParamOfLogMode@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
_DATA	SEGMENT
?wszParamOfLogMode@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA DB 'L'
	DB	00H, 'o', 00H, 'g', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	00H, 00H					; `KbdSrvQueryRegStartParam'::`2'::wszParamOfLogMode
_DATA	ENDS
;	COMDAT ?wszParamOfLogFileName@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
_DATA	SEGMENT
?wszParamOfLogFileName@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA DB 'L'
	DB	00H, 'o', 00H, 'g', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	00H, 00H					; `KbdSrvQueryRegStartParam'::`2'::wszParamOfLogFileName
_DATA	ENDS
;	COMDAT ?wszRegSubPath@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
_DATA	SEGMENT
?wszRegSubPath@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA DB '\'
	DB	00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, 00H, 00H ; `KbdSrvQueryRegStartParam'::`2'::wszRegSubPath
_DATA	ENDS
;	COMDAT ?wszRegPath@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
_DATA	SEGMENT
?wszRegPath@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA DB 'S'
	DB	00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, '\', 00H
	DB	'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'l', 00H, 'S', 00H, 'e', 00H, 't', 00H, '\', 00H, 'S', 00H, 'e'
	DB	00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 00H, 00H				; `KbdSrvQueryRegStartParam'::`2'::wszRegPath
_DATA	ENDS
;	COMDAT ?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA
_DATA	SEGMENT
?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA DD 01H ; `ReportStatusToSCMgr'::`2'::dwCheckPoint
_DATA	ENDS
;	COMDAT ??_C@_1BK@JHBDMOKK@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAc?$AAc?$AAu?$AAr?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@JHBDMOKK@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAc?$AAc?$AAu?$AAr?$AA?6?$AA?$AA@ DB 'e'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H
	DB	'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@EGFPMFNB@?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@EGFPMFNB@?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?6?$AA?$AA@ DB 's'
	DB	00H, 'u', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@NKJDKGAH@?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA_?$AAp?$AAa?$AAr?$AAa?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@NKJDKGAH@?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA_?$AAp?$AAa?$AAr?$AAa?$AAm?$AA?$AA@ DB 'c'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, '_', 00H
	DB	'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@ DB 'k'
	DB	00H, 'b', 00H, 'd', 00H, 'h', 00H, 'o', 00H, 'o', 00H, 'k', 00H
	DB	's', 00H, 'r', 00H, 'v', 00H, 00H, 00H	; `string'
CONST	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CreateParametersForService@@YAHPA_WKW4_LOG_MODE@@@Z ; CreateParametersForService
EXTRN	___security_cookie:DWORD
EXTRN	__except_handler4:PROC
;	COMDAT xdata$x
; File d:\my\c++projects\release\drm_7_05_08\kbdhooksrv\src\kbdhooksrv.cpp
xdata$x	SEGMENT
__sehtable$?CreateParametersForService@@YAHPA_WKW4_LOG_MODE@@@Z DD 0ffffffe4H
	DD	00H
	DD	0ffffff6cH
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN12@CreatePara
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?CreateParametersForService@@YAHPA_WKW4_LOG_MODE@@@Z
_TEXT	SEGMENT
_hKey$ = -132						; size = 4
_hSubKey$ = -128					; size = 4
_b$ = -124						; size = 4
_wszRegPath$ = -120					; size = 90
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_HideStatus$ = 8					; size = 4
_LogMode$ = 12						; size = 4
?CreateParametersForService@@YAHPA_WKW4_LOG_MODE@@@Z PROC ; CreateParametersForService, COMDAT
; _LogFileName$ = ecx

; 877  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$?CreateParametersForService@@YAHPA_WKW4_LOG_MODE@@@Z
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	ebx, ecx

; 878  : 	WCHAR wszRegPath[] = L"System\\CurrentControlSet\\Services\\kbdhooksrv";

	mov	ecx, 22					; 00000016H
	mov	esi, OFFSET ??_C@_1FK@CPPACLFG@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@
	lea	edi, DWORD PTR _wszRegPath$[ebp]
	rep movsd
	movsw

; 879  : 	HKEY hKey;
; 880  : 	HKEY hSubKey;
; 881  : 	DWORD cbLogFileName;
; 882  : 	BOOL b = TRUE;

	mov	edi, 1
	mov	DWORD PTR _b$[ebp], edi

; 883  : 
; 884  : 	if( RegOpenKeyEx( HKEY_LOCAL_MACHINE, 
; 885  : 			wszRegPath, 
; 886  : 			0, //reserved 
; 887  : 			KEY_SET_VALUE | KEY_CREATE_SUB_KEY,
; 888  : 			&hKey ) != ERROR_SUCCESS )

	lea	eax, DWORD PTR _hKey$[ebp]
	push	eax
	push	6
	push	0
	lea	ecx, DWORD PTR _wszRegPath$[ebp]
	push	ecx
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegOpenKeyExW@20
	test	eax, eax

; 889  : 		return FALSE;

	jne	SHORT $LN18@CreatePara

; 890  : 
; 891  : 	if( RegCreateKey( hKey, L"parameters", &hSubKey ) != ERROR_SUCCESS )

	lea	edx, DWORD PTR _hSubKey$[ebp]
	push	edx
	push	OFFSET ??_C@_1BG@HOBJFBDD@?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAs?$AA?$AA@
	mov	eax, DWORD PTR _hKey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCreateKeyW@12
	test	eax, eax
	je	SHORT $LN7@CreatePara

; 892  : 	{
; 893  : 		RegCloseKey( hKey );

	mov	ecx, DWORD PTR _hKey$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegCloseKey@4
$LN18@CreatePara:

; 894  : 		return FALSE;

	xor	eax, eax
	jmp	$LN9@CreatePara
$LN7@CreatePara:

; 895  : 	}
; 896  : 
; 897  : 	cbLogFileName = lstrlen( LogFileName ) * sizeof( WCHAR ) + sizeof( WCHAR );

	push	ebx
	call	DWORD PTR __imp__lstrlenW@4
	lea	eax, DWORD PTR [eax+eax+2]

; 898  : 
; 899  : 	__try

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 900  : 	{
; 901  : 		if( RegSetValueEx( hSubKey, L"LogFile",
; 902  : 			0, REG_SZ,(BYTE*) LogFileName, cbLogFileName ) != ERROR_SUCCESS )

	push	eax
	push	ebx
	push	edi
	push	0
	push	OFFSET ??_C@_1BA@DDFFCLKH@?$AAL?$AAo?$AAg?$AAF?$AAi?$AAl?$AAe?$AA?$AA@
	mov	edx, DWORD PTR _hSubKey$[ebp]
	push	edx
	mov	esi, DWORD PTR __imp__RegSetValueExW@24
	call	esi
	test	eax, eax
	je	SHORT $LN5@CreatePara

; 903  : 		{
; 904  : 				b = FALSE;

	mov	DWORD PTR _b$[ebp], 0

; 905  : 				__leave;

	jmp	SHORT $LN1@CreatePara
$LN5@CreatePara:

; 906  : 		}
; 907  : 
; 908  : 		if( HideStatus )

	xor	ebx, ebx
	cmp	DWORD PTR _HideStatus$[ebp], ebx
	je	SHORT $LN4@CreatePara

; 909  : 			HideStatus = 1;

	mov	DWORD PTR _HideStatus$[ebp], edi
$LN4@CreatePara:

; 910  : 
; 911  : 		if( RegSetValueEx( hSubKey, L"HideStatus",
; 912  : 			0, REG_DWORD,(BYTE*) &HideStatus, sizeof( DWORD ) ) != ERROR_SUCCESS )

	push	4
	lea	eax, DWORD PTR _HideStatus$[ebp]
	push	eax
	push	4
	push	ebx
	push	OFFSET ??_C@_1BG@BEGECOBP@?$AAH?$AAi?$AAd?$AAe?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$AA@
	mov	ecx, DWORD PTR _hSubKey$[ebp]
	push	ecx
	call	esi
	test	eax, eax

; 913  : 		{
; 914  : 				b = FALSE;
; 915  : 				__leave;

	jne	SHORT $LN17@CreatePara

; 916  : 		}
; 917  : 
; 918  : 		if( ( DWORD ) LogMode )

	cmp	DWORD PTR _LogMode$[ebp], ebx
	je	SHORT $LN2@CreatePara

; 919  : 			LogMode = Text;

	mov	DWORD PTR _LogMode$[ebp], edi
$LN2@CreatePara:

; 920  : 
; 921  : 		if( RegSetValueEx( hSubKey, L"LogMode",
; 922  : 			0, REG_DWORD,(BYTE*) &LogMode, sizeof( DWORD ) ) != ERROR_SUCCESS )

	push	4
	lea	edx, DWORD PTR _LogMode$[ebp]
	push	edx
	push	4
	push	ebx
	push	OFFSET ??_C@_1BA@OBIJFLLK@?$AAL?$AAo?$AAg?$AAM?$AAo?$AAd?$AAe?$AA?$AA@
	mov	eax, DWORD PTR _hSubKey$[ebp]
	push	eax
	call	esi
	test	eax, eax
	je	SHORT $LN1@CreatePara
$LN17@CreatePara:

; 923  : 		{
; 924  : 				b = FALSE;

	mov	DWORD PTR _b$[ebp], ebx
$LN1@CreatePara:

; 925  : 				__leave;
; 926  : 		}
; 927  : 	}
; 928  : 	__finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN14@CreatePara
$LN15@CreatePara:

; 932  : 	}
; 933  : 
; 934  : 	return b;

	mov	eax, DWORD PTR _b$[ebp]
$LN9@CreatePara:

; 935  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@CreatePara:
$LN19@CreatePara:
$LN14@CreatePara:

; 929  : 	{
; 930  : 		RegCloseKey( hKey );

	mov	ecx, DWORD PTR _hKey$[ebp]
	push	ecx
	mov	esi, DWORD PTR __imp__RegCloseKey@4
	call	esi

; 931  : 		RegCloseKey( hSubKey );

	mov	edx, DWORD PTR _hSubKey$[ebp]
	push	edx
	call	esi
$LN13@CreatePara:
$LN16@CreatePara:
	ret	0
?CreateParametersForService@@YAHPA_WKW4_LOG_MODE@@@Z ENDP ; CreateParametersForService
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?IsUserAdmin@@YAHXZ				; IsUserAdmin
; Function compile flags: /Ogtpy
;	COMDAT ?IsUserAdmin@@YAHXZ
_TEXT	SEGMENT
_b$ = -20						; size = 4
_AdministratorsGroup$ = -16				; size = 4
_NtAuthority$ = -12					; size = 6
__$ArrayPad$ = -4					; size = 4
?IsUserAdmin@@YAHXZ PROC				; IsUserAdmin, COMDAT

; 853  : {

	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+20], eax
	push	ebx

; 854  : 	BOOL b;
; 855  : 	SID_IDENTIFIER_AUTHORITY NtAuthority = SECURITY_NT_AUTHORITY;

	xor	ebx, ebx

; 856  : 	PSID AdministratorsGroup;
; 857  : 
; 858  : 	b = AllocateAndInitializeSid( &NtAuthority,
; 859  : 		2,
; 860  : 		SECURITY_BUILTIN_DOMAIN_RID,
; 861  : 		DOMAIN_ALIAS_RID_ADMINS,
; 862  : 		0, 0, 0, 0, 0, 0,
; 863  : 		&AdministratorsGroup );

	lea	eax, DWORD PTR _AdministratorsGroup$[esp+24]
	push	eax
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	544					; 00000220H
	push	32					; 00000020H
	push	2
	lea	ecx, DWORD PTR _NtAuthority$[esp+64]
	push	ecx
	mov	BYTE PTR _NtAuthority$[esp+68], bl
	mov	BYTE PTR _NtAuthority$[esp+69], bl
	mov	BYTE PTR _NtAuthority$[esp+70], bl
	mov	BYTE PTR _NtAuthority$[esp+71], bl
	mov	BYTE PTR _NtAuthority$[esp+72], bl
	mov	BYTE PTR _NtAuthority$[esp+73], 5
	call	DWORD PTR __imp__AllocateAndInitializeSid@44

; 864  : 
; 865  : 	if( b )

	cmp	eax, ebx
	mov	DWORD PTR _b$[esp+24], eax
	je	SHORT $LN2@IsUserAdmi

; 866  : 	{
; 867  : 		if( !CheckTokenMembership( NULL, AdministratorsGroup, &b ) )

	mov	eax, DWORD PTR _AdministratorsGroup$[esp+24]
	lea	edx, DWORD PTR _b$[esp+24]
	push	edx
	push	eax
	push	ebx
	call	DWORD PTR __imp__CheckTokenMembership@12
	test	eax, eax
	jne	SHORT $LN1@IsUserAdmi

; 868  : 			b = FALSE;

	mov	DWORD PTR _b$[esp+24], ebx
$LN1@IsUserAdmi:

; 869  : 
; 870  : 		FreeSid( AdministratorsGroup );

	mov	ecx, DWORD PTR _AdministratorsGroup$[esp+24]
	push	ecx
	call	DWORD PTR __imp__FreeSid@4

; 871  : 	}
; 872  : 	
; 873  : 	return b;

	mov	eax, DWORD PTR _b$[esp+24]
$LN2@IsUserAdmi:

; 874  : }

	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
?IsUserAdmin@@YAHXZ ENDP				; IsUserAdmin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?AddEventSource@@YAHPA_W@Z			; AddEventSource
; Function compile flags: /Ogtpy
;	COMDAT ?AddEventSource@@YAHPA_W@Z
_TEXT	SEGMENT
_hk$ = -156						; size = 4
_dwDisp$ = -152						; size = 4
_dwData$ = -148						; size = 4
_wszBuf$ = -144						; size = 132
__$ArrayPad$ = -4					; size = 4
?AddEventSource@@YAHPA_W@Z PROC				; AddEventSource, COMDAT
; _pszMsgDLL$ = ebx

; 807  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+160], eax
	push	esi
	push	edi

; 808  : 	HKEY hk; 
; 809  : 	DWORD dwData, dwDisp; 
; 810  : 	WCHAR wszBuf[] = L"SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\kbdhooksrv"; 

	mov	ecx, 33					; 00000021H
	mov	esi, OFFSET ??_C@_1IE@MMBDDIDB@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@
	lea	edi, DWORD PTR _wszBuf$[esp+168]

; 811  : 
; 812  :    // Create the event source as a subkey of the log. 
; 813  : 	if( RegCreateKeyEx( HKEY_LOCAL_MACHINE, wszBuf, 
; 814  :           0, NULL, REG_OPTION_NON_VOLATILE,
; 815  :           KEY_WRITE, NULL, &hk, &dwDisp ) != ERROR_SUCCESS ) 

	lea	eax, DWORD PTR _dwDisp$[esp+168]
	push	eax
	rep movsd
	lea	ecx, DWORD PTR _hk$[esp+172]
	push	ecx
	push	0
	push	131078					; 00020006H
	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _wszBuf$[esp+196]
	push	edx
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegCreateKeyExW@36
	test	eax, eax

; 816  : 			return FALSE;

	jne	SHORT $LN6@AddEventSo

; 817  : 	 
; 818  :    // Set the name of the message file. 
; 819  :  
; 820  : 	dwDisp = ( lstrlenW( pszMsgDLL ) + 1 ) * sizeof( WCHAR );

	push	ebx
	call	DWORD PTR __imp__lstrlenW@4

; 821  : 	if( RegSetValueEx( hk,              // subkey handle 
; 822  : 		L"EventMessageFile",        // value name 
; 823  : 		0,                         // must be zero 
; 824  : 		REG_SZ,					// value type 
; 825  : 		(LPBYTE) pszMsgDLL,        // pointer to value data 
; 826  : 		dwDisp ) != ERROR_SUCCESS ) // length of value data 

	mov	esi, DWORD PTR __imp__RegSetValueExW@24
	lea	eax, DWORD PTR [eax+eax+2]
	push	eax
	push	ebx
	push	1
	push	0
	mov	DWORD PTR _dwDisp$[esp+184], eax
	mov	eax, DWORD PTR _hk$[esp+184]
	push	OFFSET ??_C@_1CC@JONFAEOP@?$AAE?$AAv?$AAe?$AAn?$AAt?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?$AA@
	push	eax
	call	esi
	test	eax, eax
	je	SHORT $LN2@AddEventSo
$LN7@AddEventSo:

; 827  :    {
; 828  :       RegCloseKey(hk); 

	mov	ecx, DWORD PTR _hk$[esp+168]
	push	ecx
	call	DWORD PTR __imp__RegCloseKey@4
$LN6@AddEventSo:

; 829  :       return FALSE;

	xor	eax, eax

; 849  : 	return TRUE;
; 850  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+160]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@AddEventSo:

; 830  :    }
; 831  :  
; 832  :    // Set the supported event types. 
; 833  :  
; 834  : 	dwData = EVENTLOG_ERROR_TYPE | EVENTLOG_SUCCESS | 
; 835  : 		EVENTLOG_INFORMATION_TYPE; 
; 836  :  
; 837  : 	if( RegSetValueEx(hk,      // subkey handle 
; 838  : 		L"TypesSupported",  // value name 
; 839  : 		0,                 // must be zero 
; 840  : 		REG_DWORD,         // value type 
; 841  : 		(LPBYTE) &dwData,  // pointer to value data 
; 842  : 		sizeof( DWORD ) ) != ERROR_SUCCESS )    // length of value data 

	mov	eax, DWORD PTR _hk$[esp+168]
	push	4
	lea	edx, DWORD PTR _dwData$[esp+172]
	push	edx
	push	4
	push	0
	push	OFFSET ??_C@_1BO@CHOLPGLN@?$AAT?$AAy?$AAp?$AAe?$AAs?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?$AA@
	push	eax
	mov	DWORD PTR _dwData$[esp+192], 5
	call	esi
	test	eax, eax

; 843  : 	{
; 844  : 		RegCloseKey(hk);
; 845  : 		return FALSE;

	jne	SHORT $LN7@AddEventSo

; 846  : 	}
; 847  :  
; 848  : 	RegCloseKey(hk); 

	mov	edx, DWORD PTR _hk$[esp+168]
	push	edx
	call	DWORD PTR __imp__RegCloseKey@4

; 849  : 	return TRUE;
; 850  : }

	mov	ecx, DWORD PTR __$ArrayPad$[esp+168]
	pop	edi
	pop	esi
	xor	ecx, esp
	mov	eax, 1
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AddEventSource@@YAHPA_W@Z ENDP				; AddEventSource
_TEXT	ENDS
PUBLIC	?KbdSrvPrintUsage@@YAXXZ			; KbdSrvPrintUsage
; Function compile flags: /Ogtpy
;	COMDAT ?KbdSrvPrintUsage@@YAXXZ
_TEXT	SEGMENT
?KbdSrvPrintUsage@@YAXXZ PROC				; KbdSrvPrintUsage, COMDAT

; 795  : 	wprintf( L"Usage: kbdhooksrv -{install_driver | remove_driver | install_service | remove_service | start_service | register_source}\n\n" );

	push	OFFSET ??_C@_1PG@FLADPFAE@?$AAU?$AAs?$AAa?$AAg?$AAe?$AA?3?$AA?5?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?5?$AA?9?$AA?$HL?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv@
	call	_wprintf

; 796  : 	wprintf( L"-install_driver: install keyboard filter driver in your system\n" );

	push	OFFSET ??_C@_1IA@MLFCBHIB@?$AA?9?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr@
	call	_wprintf

; 797  : 	wprintf( L"-remove_driver: remove keyboard filter driver from your system\n" );

	push	OFFSET ??_C@_1IA@MDNNNGJE@?$AA?9?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5@
	call	_wprintf

; 798  : 	wprintf( L"-install_service: install keyboard filter driver service in your system\n" );

	push	OFFSET ??_C@_1JC@HHCLBLHH@?$AA?9?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa@
	call	_wprintf

; 799  : 	wprintf( L"-remove_service: remove keyboard filter driver service from your system\n" );

	push	OFFSET ??_C@_1JC@GLGLOMBN@?$AA?9?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd@
	call	_wprintf

; 800  : 	wprintf( L"-register_source: register event source in registry\n" );

	push	OFFSET ??_C@_1GK@ONDBLGDC@?$AA?9?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt@
	call	_wprintf

; 801  : 	wprintf( L"-unregister_source: unregister event source from registry\n" );

	push	OFFSET ??_C@_1HG@OKPIPPAA@?$AA?9?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAe@
	call	_wprintf

; 802  : 	wprintf( L"-check_admin: check administrator sid in token access\n" );

	push	OFFSET ??_C@_1GO@EBILKFLL@?$AA?9?$AAc?$AAh?$AAe?$AAc?$AAk?$AA_?$AAa?$AAd?$AAm?$AAi?$AAn?$AA?3?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAa?$AAd?$AAm?$AAi?$AAn?$AAi?$AAs?$AAt?$AAr?$AAa?$AAt?$AAo@
	call	_wprintf

; 803  : 	wprintf( L"-create_param LogFileFullPath LogMode LogStatus: create parameters for service in registry\n");

	push	OFFSET ??_C@_1LI@EJAMLLAO@?$AA?9?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA_?$AAp?$AAa?$AAr?$AAa?$AAm?$AA?5?$AAL?$AAo?$AAg?$AAF?$AAi?$AAl?$AAe?$AAF?$AAu?$AAl?$AAl?$AAP?$AAa?$AAt?$AAh?$AA?5?$AAL?$AAo@
	call	_wprintf
	add	esp, 36					; 00000024H

; 804  : }

	ret	0
?KbdSrvPrintUsage@@YAXXZ ENDP				; KbdSrvPrintUsage
_TEXT	ENDS
PUBLIC	?GetSrvInstallDir@@YAHPA_WK@Z			; GetSrvInstallDir
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetSrvInstallDir@@YAHPA_WK@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN5@GetSrvInst
	DD	FLAT:$LN6@GetSrvInst
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?GetSrvInstallDir@@YAHPA_WK@Z
_TEXT	SEGMENT
__$SEHRec$ = -24					; size = 24
?GetSrvInstallDir@@YAHPA_WK@Z PROC			; GetSrvInstallDir, COMDAT
; _wszSrvInstallDir$ = ecx

; 776  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$?GetSrvInstallDir@@YAHPA_WK@Z
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$SEHRec$[ebp], esp
	mov	edi, ecx

; 777  : 	DWORD dwStatus = 1;

	mov	esi, 1

; 778  : 
; 779  : 	__try

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 780  : 	{
; 781  : 		ExpandEnvironmentStrings( L"%ProgramFiles%", wszSrvInstallDir, cchPrgInstallDir );

	push	256					; 00000100H
	push	edi
	push	OFFSET ??_C@_1BO@DFHEBLHG@?$AA?$CF?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?$CF?$AA?$AA@
	call	DWORD PTR __imp__ExpandEnvironmentStringsW@12

; 782  : 
; 783  : 		lstrcatW( wszSrvInstallDir, L"\\BGU Soft\\Kbdhooksrv\\" );

	push	OFFSET ??_C@_1CM@LHGOGJDM@?$AA?2?$AAB?$AAG?$AAU?$AA?5?$AAS?$AAo?$AAf?$AAt?$AA?2?$AAK?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?2?$AA?$AA@
	push	edi
	call	DWORD PTR __imp__lstrcatW@8

; 784  : 	}

	jmp	SHORT $LN10@GetSrvInst
$LN5@GetSrvInst:
$LN11@GetSrvInst:

; 785  : 	__except( EXCEPTION_EXECUTE_HANDLER )

	mov	eax, 1
$LN9@GetSrvInst:
$LN7@GetSrvInst:
	ret	0
$LN6@GetSrvInst:
	mov	esp, DWORD PTR __$SEHRec$[ebp]

; 786  : 	{
; 787  : 		dwStatus = 0;

	xor	esi, esi
$LN10@GetSrvInst:

; 788  : 	}

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH

; 789  : 
; 790  : 	return dwStatus;

	mov	eax, esi

; 791  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSrvInstallDir@@YAHPA_WK@Z ENDP			; GetSrvInstallDir
_TEXT	ENDS
PUBLIC	?RemoveService@@YAHPB_W@Z			; RemoveService
; Function compile flags: /Ogtpy
;	COMDAT ?RemoveService@@YAHPB_W@Z
_TEXT	SEGMENT
_ss$ = -28						; size = 28
?RemoveService@@YAHPB_W@Z PROC				; RemoveService, COMDAT

; 610  : {

	sub	esp, 28					; 0000001cH
	push	ebp
	push	edi

; 611  : 	SC_HANDLE hSM = NULL;
; 612  : 	SC_HANDLE hSrv = NULL;
; 613  : 	DWORD status = 1;

	mov	edi, 1

; 614  : 	SERVICE_STATUS ss;
; 615  : 	
; 616  : 	hSM = OpenSCManager( NULL, //local machine
; 617  : 		NULL, //database def
; 618  : 		SC_MANAGER_CONNECT );

	push	edi
	push	0
	push	0
	call	DWORD PTR __imp__OpenSCManagerW@12
	mov	ebp, eax

; 619  : 
; 620  : 	if( hSM == NULL )

	test	ebp, ebp
	jne	SHORT $LN15@RemoveServ
	pop	edi
	pop	ebp

; 671  : }

	add	esp, 28					; 0000001cH
	ret	0
$LN15@RemoveServ:
	push	esi

; 621  : 		return 0;
; 622  : 
; 623  : 	hSrv = OpenService( hSM, wszServiceName, 
; 624  : 		DELETE | SERVICE_QUERY_STATUS | SERVICE_STOP );

	push	65572					; 00010024H
	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	ebp
	call	DWORD PTR __imp__OpenServiceW@12
	mov	esi, eax

; 625  : 
; 626  : 	if( hSrv )

	test	esi, esi
	je	$LN21@RemoveServ
	push	ebx

; 627  : 	{
; 628  : 		QueryServiceStatus( hSrv, &ss );

	mov	ebx, DWORD PTR __imp__QueryServiceStatus@8
	lea	eax, DWORD PTR _ss$[esp+44]
	push	eax
	push	esi
	call	ebx

; 629  : 
; 630  : 		if( ss.dwCurrentState == SERVICE_STOPPED )

	cmp	DWORD PTR _ss$[esp+48], edi
	jne	SHORT $LN13@RemoveServ

; 631  : 		{
; 632  : 			DeleteService( hSrv );

	push	esi
	call	DWORD PTR __imp__DeleteService@4

; 633  : 		}
; 634  : 		else

	jmp	SHORT $LN1@RemoveServ
$LN13@RemoveServ:

; 635  : 		{
; 636  : 			if( ControlService( hSrv, SERVICE_CONTROL_STOP, &ss ) )

	lea	ecx, DWORD PTR _ss$[esp+44]
	push	ecx
	push	1
	push	esi
	call	DWORD PTR __imp__ControlService@12
	test	eax, eax
	je	SHORT $LN11@RemoveServ

; 637  : 			{
; 638  : 				Sleep( 1000 );

	mov	edi, DWORD PTR __imp__Sleep@4
	push	1000					; 000003e8H
	call	edi

; 639  : 
; 640  : 				while( QueryServiceStatus( hSrv, &ss ) )

	lea	edx, DWORD PTR _ss$[esp+44]
	push	edx
	push	esi
	call	ebx
	test	eax, eax
	je	SHORT $LN20@RemoveServ
$LL10@RemoveServ:

; 641  : 				{
; 642  : 					if( ss.dwCurrentState == SERVICE_STOP_PENDING )

	cmp	DWORD PTR _ss$[esp+48], 3
	jne	SHORT $LN20@RemoveServ

; 643  : 						Sleep( 1000 );

	push	1000					; 000003e8H
	call	edi
	lea	eax, DWORD PTR _ss$[esp+44]
	push	eax
	push	esi
	call	ebx
	test	eax, eax
	jne	SHORT $LL10@RemoveServ
$LN20@RemoveServ:

; 644  : 					else
; 645  : 						break;
; 646  : 				}
; 647  : 
; 648  : 				if( ss.dwCurrentState == SERVICE_STOPPED )

	cmp	DWORD PTR _ss$[esp+48], 1

; 649  : 					status = 1;
; 650  : 				else 
; 651  : 					status = 0;
; 652  : 
; 653  : 				if( status )

	jne	SHORT $LN11@RemoveServ

; 654  : 				{
; 655  : 					if( DeleteService( hSrv ) )

	push	esi
	call	DWORD PTR __imp__DeleteService@4
	mov	edi, eax
	neg	edi
	sbb	edi, edi
	neg	edi

; 656  : 						status = 1;
; 657  : 					else
; 658  : 						status = 0;
; 659  : 				}
; 660  : 			}
; 661  : 			else

	jmp	SHORT $LN1@RemoveServ
$LN11@RemoveServ:

; 662  : 				status = 0;

	xor	edi, edi
$LN1@RemoveServ:

; 663  : 		}
; 664  : 
; 665  : 		CloseServiceHandle( hSrv );

	push	esi
	call	DWORD PTR __imp__CloseServiceHandle@4
	pop	ebx
$LN21@RemoveServ:

; 666  : 	}
; 667  : 
; 668  : 	CloseServiceHandle( hSM );

	push	ebp
	call	DWORD PTR __imp__CloseServiceHandle@4
	pop	esi

; 669  : 
; 670  : 	return status;

	mov	eax, edi
	pop	edi
	pop	ebp

; 671  : }

	add	esp, 28					; 0000001cH
	ret	0
?RemoveService@@YAHPB_W@Z ENDP				; RemoveService
_TEXT	ENDS
PUBLIC	_wszDescription$GSCopy$
PUBLIC	_wszDependOnService$GSCopy$
PUBLIC	_wszLoadOrderGroup$GSCopy$
PUBLIC	_wszServiceDisplayName$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?InstallService@@YAHPB_W00KKK00PA_W@Z		; InstallService
; Function compile flags: /Ogtpy
;	COMDAT ?InstallService@@YAHPB_W00KKK00PA_W@Z
_TEXT	SEGMENT
_status$ = -548						; size = 4
_hKey$ = -544						; size = 4
_wszLoadOrderGroup$GSCopy$ = -540			; size = 4
_wszDependOnService$GSCopy$ = -536			; size = 4
_wszServiceDisplayName$GSCopy$ = -532			; size = 4
_wszDescription$GSCopy$ = -528				; size = 4
_wszKeyName$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_wszServicePath$ = 8					; size = 4
_wszServiceDisplayName$ = 12				; size = 4
_dwServiceType$ = 16					; size = 4
_dwStartType$ = 20					; size = 4
_wszLoadOrderGroup$ = 24				; size = 4
?InstallService@@YAHPB_W00KKK00PA_W@Z PROC		; InstallService, COMDAT
; _wszServiceName$ = ebx
; _wszDependOnService$ = ecx
; _wszDescription$ = edx

; 531  : {

	sub	esp, 548				; 00000224H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+548], eax

; 560  : 
; 561  : 	if( hSrv == NULL )

	mov	eax, DWORD PTR _wszLoadOrderGroup$[esp+544]
	push	ebp
	mov	ebp, DWORD PTR _wszServicePath$[esp+548]
	push	esi
	push	edi
	mov	edi, DWORD PTR _wszServiceDisplayName$[esp+556]
	push	3
	push	0
	push	0
	mov	DWORD PTR _wszServiceDisplayName$GSCopy$[esp+572], edi
	mov	DWORD PTR _wszLoadOrderGroup$GSCopy$[esp+572], eax
	mov	DWORD PTR _wszDependOnService$GSCopy$[esp+572], ecx
	mov	DWORD PTR _wszDescription$GSCopy$[esp+572], edx
	mov	DWORD PTR _status$[esp+572], 1
	call	DWORD PTR __imp__OpenSCManagerW@12
	mov	esi, eax
	test	esi, esi
	jne	SHORT $LN8@InstallSer
	pop	edi
	pop	esi
	pop	ebp

; 605  : 
; 606  : 	return status;
; 607  : }

	mov	ecx, DWORD PTR __$ArrayPad$[esp+548]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 548				; 00000224H
	ret	0
$LN8@InstallSer:

; 532  : 	SC_HANDLE hSM = NULL;
; 533  : 	SC_HANDLE hSrv = NULL;
; 534  : 	DWORD status = 1;
; 535  : 	HKEY hKey;
; 536  : 	WCHAR wszKeyName[260];
; 537  : 	DWORD cbDescription;
; 538  : 	
; 539  : 	hSM = OpenSCManager( NULL, //local machine
; 540  : 		NULL, //database def
; 541  : 		SC_MANAGER_CONNECT | SC_MANAGER_CREATE_SERVICE );
; 542  : 
; 543  : 	if( hSM == NULL )
; 544  : 		return 0;
; 545  : 	
; 546  : 	hSrv = CreateService( hSM,
; 547  : 		wszServiceName,
; 548  : 		wszServiceDisplayName,
; 549  : 		SERVICE_ALL_ACCESS,
; 550  : 		dwServiceType,
; 551  : 		dwStartType,
; 552  : 		dwErrorControl,
; 553  : 		wszServicePath,
; 554  : 		wszLoadOrderGroup, //group
; 555  : 		NULL, //tag
; 556  : 		wszDependOnService, //dependencies
; 557  : 		NULL, //account
; 558  : 		NULL //password
; 559  : 	);

	mov	eax, DWORD PTR _wszDependOnService$GSCopy$[esp+560]
	mov	ecx, DWORD PTR _wszLoadOrderGroup$GSCopy$[esp+560]
	mov	edx, DWORD PTR _dwStartType$[esp+556]
	push	0
	push	0
	push	eax
	mov	eax, DWORD PTR _dwServiceType$[esp+568]
	push	0
	push	ecx
	push	ebp
	push	1
	push	edx
	push	eax
	push	983551					; 000f01ffH
	push	edi
	push	ebx
	push	esi
	call	DWORD PTR __imp__CreateServiceW@52
	mov	edi, eax

; 560  : 
; 561  : 	if( hSrv == NULL )

	test	edi, edi
	jne	SHORT $LN12@InstallSer

; 562  : 	{
; 563  : 		if( GetLastError(  ) == ERROR_SERVICE_EXISTS )

	call	DWORD PTR __imp__GetLastError@0
	cmp	eax, 1073				; 00000431H
	jne	$LN6@InstallSer

; 564  : 		{
; 565  : 			hSrv = OpenService( hSM, wszServiceName, SERVICE_CHANGE_CONFIG );

	push	2
	push	ebx
	push	esi
	call	DWORD PTR __imp__OpenServiceW@12

; 566  : 
; 567  : 			status = ChangeServiceConfig( hSrv, dwServiceType, dwStartType, 
; 568  : 				dwErrorControl, wszServicePath, wszLoadOrderGroup, NULL, wszDependOnService, NULL, NULL, 
; 569  : 				wszServiceDisplayName );

	mov	ecx, DWORD PTR _wszServiceDisplayName$GSCopy$[esp+560]
	mov	edx, DWORD PTR _wszDependOnService$GSCopy$[esp+560]
	push	ecx
	mov	ecx, DWORD PTR _dwStartType$[esp+560]
	push	0
	push	0
	push	edx
	mov	edx, DWORD PTR _dwServiceType$[esp+572]
	push	0
	mov	edi, eax
	mov	eax, DWORD PTR _wszLoadOrderGroup$GSCopy$[esp+580]
	push	eax
	push	ebp
	push	1
	push	ecx
	push	edx
	push	edi
	call	DWORD PTR __imp__ChangeServiceConfigW@44

; 574  : 		}
; 575  : 	}
; 576  : 
; 577  : 	if( status && wszDescription )

	test	eax, eax
	mov	DWORD PTR _status$[esp+560], eax
	je	SHORT $LN14@InstallSer
$LN12@InstallSer:
	mov	ebp, DWORD PTR _wszDescription$GSCopy$[esp+560]
	test	ebp, ebp
	je	SHORT $LN14@InstallSer

; 578  : 	{
; 579  : 		lstrcpy( wszKeyName, L"System\\CurrentControlSet\\Services\\" );

	push	OFFSET ??_C@_1EG@GFAIDJBN@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@
	lea	eax, DWORD PTR _wszKeyName$[esp+564]
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8

; 580  : 		lstrcat( wszKeyName, wszServiceName );

	push	ebx
	lea	ecx, DWORD PTR _wszKeyName$[esp+564]
	push	ecx
	call	DWORD PTR __imp__lstrcatW@8

; 581  : 		
; 582  : 		RegOpenKeyEx( HKEY_LOCAL_MACHINE, 
; 583  : 			wszKeyName, 
; 584  : 			0, //reserved 
; 585  : 			KEY_SET_VALUE,
; 586  : 			&hKey );

	lea	edx, DWORD PTR _hKey$[esp+560]
	push	edx
	push	2
	push	0
	lea	eax, DWORD PTR _wszKeyName$[esp+572]
	push	eax
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegOpenKeyExW@20

; 587  : 
; 588  : 		cbDescription = lstrlen( wszDescription ) * sizeof( WCHAR ) + sizeof( WCHAR );

	push	ebp
	call	DWORD PTR __imp__lstrlenW@4

; 589  : 
; 590  : 		if( RegSetValueEx( hKey, L"Description",
; 591  : 			0, //reserved
; 592  : 			REG_SZ,
; 593  : 			( BYTE* )wszDescription,
; 594  : 			cbDescription ) != ERROR_SUCCESS )

	mov	ecx, DWORD PTR _hKey$[esp+560]
	lea	eax, DWORD PTR [eax+eax+2]
	push	eax
	push	ebp
	push	1
	push	0
	push	OFFSET ??_C@_1BI@DLMANABL@?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	push	ecx
	call	DWORD PTR __imp__RegSetValueExW@24
	test	eax, eax
	je	SHORT $LN3@InstallSer

; 595  : 		{
; 596  : 			status = 0;

	mov	DWORD PTR _status$[esp+560], 0
$LN3@InstallSer:

; 597  : 		}
; 598  : 
; 599  : 		RegCloseKey( hKey );

	mov	edx, DWORD PTR _hKey$[esp+560]
	push	edx
	call	DWORD PTR __imp__RegCloseKey@4
$LN14@InstallSer:

; 600  : 
; 601  : 	}
; 602  : 
; 603  : 	if( hSM ) CloseServiceHandle( hSM );

	push	esi
	mov	esi, DWORD PTR __imp__CloseServiceHandle@4
	call	esi

; 604  : 	if( hSrv ) CloseServiceHandle( hSrv );

	test	edi, edi
	je	SHORT $LN1@InstallSer
	push	edi
	call	esi
$LN1@InstallSer:

; 605  : 
; 606  : 	return status;
; 607  : }

	mov	ecx, DWORD PTR __$ArrayPad$[esp+560]
	mov	eax, DWORD PTR _status$[esp+560]
	pop	edi
	pop	esi
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 548				; 00000224H
	ret	0
$LN6@InstallSer:

; 570  : 		}
; 571  : 		else
; 572  : 		{
; 573  : 			status = 0;

	mov	DWORD PTR _status$[esp+560], 0

; 574  : 		}
; 575  : 	}
; 576  : 
; 577  : 	if( status && wszDescription )

	jmp	SHORT $LN14@InstallSer
?InstallService@@YAHPB_W00KKK00PA_W@Z ENDP		; InstallService
_TEXT	ENDS
PUBLIC	?AddToMessageLog@@YAXGKPAPB_W@Z			; AddToMessageLog
; Function compile flags: /Ogtpy
;	COMDAT ?AddToMessageLog@@YAXGKPAPB_W@Z
_TEXT	SEGMENT
_ErrType$ = 8						; size = 2
_dwEventID$ = 12					; size = 4
?AddToMessageLog@@YAXGKPAPB_W@Z PROC			; AddToMessageLog, COMDAT

; 496  : {

	push	esi

; 497  : 	HANDLE hEvent;
; 498  : 
; 499  : 	if( dwHideMode ) return;
; 500  : 
; 501  : 	hEvent = RegisterEventSource( NULL, // for local computer
; 502  : 		SERVICE_NAME );

	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	0
	call	DWORD PTR __imp__RegisterEventSourceW@8
	mov	esi, eax

; 503  : 
; 504  : 	if( !hEvent )

	test	esi, esi
	je	SHORT $LN7@AddToMessa

; 505  : 		return;
; 506  : 
; 507  : 	if( !ReportEvent( hEvent,
; 508  : 		ErrType,
; 509  : 		0, //error category
; 510  : 		dwEventID, //error id
; 511  : 		NULL, //current user SID,
; 512  : 		0, //1 string
; 513  : 		0, //no bytes raw data,
; 514  : 		NULL,
; 515  : 		NULL //no raw data
; 516  : 		) )

	mov	eax, DWORD PTR _dwEventID$[esp]
	mov	ecx, DWORD PTR _ErrType$[esp]
	push	0
	push	0
	push	0
	push	0
	push	0
	push	eax
	push	0
	push	ecx
	push	esi
	call	DWORD PTR __imp__ReportEventW@36
	test	eax, eax
	je	SHORT $LN7@AddToMessa

; 517  : 	{
; 518  : 		return;
; 519  : 	}
; 520  : 
; 521  : 	DeregisterEventSource( hEvent );

	push	esi
	call	DWORD PTR __imp__DeregisterEventSource@4
$LN7@AddToMessa:
	pop	esi

; 522  : 	
; 523  : 	return;
; 524  : }

	ret	0
?AddToMessageLog@@YAXGKPAPB_W@Z ENDP			; AddToMessageLog
_TEXT	ENDS
PUBLIC	?KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z ; KbdSrvQueryRegStartParam
; Function compile flags: /Ogtpy
;	COMDAT ?KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z
_TEXT	SEGMENT
_hReg$ = -12						; size = 4
_cbRequired$ = -8					; size = 4
_dwType$ = -4						; size = 4
_wszLogFileName$ = 8					; size = 4
_LogMode$ = 12						; size = 4
?KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z PROC ; KbdSrvQueryRegStartParam, COMDAT

; 331  : {

	sub	esp, 12					; 0000000cH

; 332  : 	static WCHAR wszRegPath[] = L"System\\CurrentControlSet\\Services\\";
; 333  : 	static WCHAR wszRegSubPath[] = L"\\parameters";
; 334  : 	static WCHAR wszParamOfLogFileName[] = L"LogFile";
; 335  : 	static WCHAR wszParamOfLogMode[] = L"LogMode";
; 336  : 	static WCHAR wszParamOfHideStatus[] = L"HideStatus";
; 337  : 
; 338  : 	PWCHAR wszFullSrvRegPath = NULL;
; 339  : 	DWORD cbFullSrvRegPath = 0;
; 340  : 	DWORD status = 1;
; 341  : 	HKEY hReg = 0;
; 342  : 	DWORD cbRequired;
; 343  : 	DWORD dwType;
; 344  : 
; 345  : 	*wszLogFileName = 0;

	mov	eax, DWORD PTR _wszLogFileName$[esp+8]
	mov	DWORD PTR [eax], 0

; 346  : 
; 347  : 	cbFullSrvRegPath = (DWORD) wcslen( wszRegPath ) * sizeof( WCHAR ) +
; 348  : 		wcslen( SERVICE_NAME ) * sizeof( WCHAR ) + 
; 349  : 		wcslen( wszRegSubPath ) * sizeof( WCHAR ) + sizeof( WCHAR );

	mov	eax, OFFSET ?wszRegPath@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	ebp
	mov	ebp, 1
	mov	DWORD PTR _hReg$[esp+16], 0
	lea	edx, DWORD PTR [eax+2]
$LL37@KbdSrvQuer:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL37@KbdSrvQuer
	sub	eax, edx
	sar	eax, 1
	push	ebx
	push	esi
	mov	edx, eax
	mov	eax, OFFSET ?wszRegSubPath@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	edi
	lea	esi, DWORD PTR [eax+2]
	npad	1
$LL38@KbdSrvQuer:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL38@KbdSrvQuer
	sub	eax, esi
	sar	eax, 1

; 350  : 
; 351  : 	wszFullSrvRegPath = (PWCHAR) HeapAlloc( GetProcessHeap(), 
; 352  : 		HEAP_ZERO_MEMORY, cbFullSrvRegPath );

	add	eax, edx
	lea	ecx, DWORD PTR [eax+eax+22]
	push	ecx
	push	8
	call	DWORD PTR __imp__GetProcessHeap@0
	mov	ebx, DWORD PTR __imp__HeapAlloc@12
	push	eax
	call	ebx
	mov	esi, eax

; 353  : 
; 354  : 	lstrcpyW( wszFullSrvRegPath, wszRegPath );

	push	OFFSET ?wszRegPath@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	esi
	call	DWORD PTR __imp__lstrcpyW@8

; 355  : 	lstrcatW( wszFullSrvRegPath, SERVICE_NAME );

	mov	edi, DWORD PTR __imp__lstrcatW@8
	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	esi
	call	edi

; 356  : 	lstrcatW( wszFullSrvRegPath, wszRegSubPath );

	push	OFFSET ?wszRegSubPath@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	esi
	call	edi

; 357  : 
; 358  : 	if( !wszFullSrvRegPath )

	test	esi, esi
	jne	SHORT $LN34@KbdSrvQuer

; 359  : 	{
; 360  : 		status = 0;

	xor	ebp, ebp
	jmp	$LN4@KbdSrvQuer
$LN34@KbdSrvQuer:

; 361  : 		goto cleanup;//error dispatch
; 362  : 	}
; 363  : 
; 364  : 	if( RegOpenKeyEx( HKEY_LOCAL_MACHINE, 
; 365  : 		wszFullSrvRegPath,
; 366  : 		0, //must be zero
; 367  : 		KEY_QUERY_VALUE,
; 368  : 		&hReg ) != ERROR_SUCCESS )

	lea	edx, DWORD PTR _hReg$[esp+28]
	push	edx
	push	1
	push	0
	push	esi
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegOpenKeyExW@20
	test	eax, eax
	je	SHORT $LN32@KbdSrvQuer

; 369  : 	{
; 370  : 		status = 0;

	xor	ebp, ebp

; 371  : 		hReg = 0;

	mov	DWORD PTR _hReg$[esp+28], ebp

; 481  : 
; 482  : cleanup:

	jmp	$cleanup$60162
$LN32@KbdSrvQuer:

; 372  : 		goto cleanup;
; 373  : 	}
; 374  : 
; 375  : 	if( RegQueryValueEx( hReg,
; 376  : 		wszParamOfLogFileName, //param name
; 377  : 		0, //reserved
; 378  : 		&dwType, //type
; 379  : 		NULL, //value of param
; 380  : 		&cbRequired ) != ERROR_SUCCESS )

	mov	edx, DWORD PTR _hReg$[esp+28]
	mov	edi, DWORD PTR __imp__RegQueryValueExW@24
	lea	eax, DWORD PTR _cbRequired$[esp+28]
	push	eax
	push	0
	lea	ecx, DWORD PTR _dwType$[esp+36]
	push	ecx
	push	0
	push	OFFSET ?wszParamOfLogFileName@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	edx
	call	edi
	test	eax, eax

; 481  : 
; 482  : cleanup:

	jne	$LN19@KbdSrvQuer

; 381  : 	{
; 382  : 		status = 0;
; 383  : 		goto cleanup;
; 384  : 	}
; 385  : 
; 386  : 	if( dwType != REG_SZ )

	cmp	DWORD PTR _dwType$[esp+28], ebp

; 481  : 
; 482  : cleanup:

	jne	$LN19@KbdSrvQuer
	mov	eax, DWORD PTR _cbRequired$[esp+28]
	push	eax
	push	8
	call	DWORD PTR __imp__GetProcessHeap@0
	push	eax
	call	ebx
	test	eax, eax
	mov	ecx, DWORD PTR _wszLogFileName$[esp+24]
	mov	DWORD PTR [ecx], eax
	je	$LN19@KbdSrvQuer
	lea	edx, DWORD PTR _cbRequired$[esp+28]
	push	edx
	push	eax
	mov	eax, DWORD PTR _hReg$[esp+36]
	push	0
	push	0
	push	OFFSET ?wszParamOfLogFileName@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	eax
	call	edi
	test	eax, eax
	jne	$LN19@KbdSrvQuer
	lea	ecx, DWORD PTR _cbRequired$[esp+28]
	push	ecx
	push	eax
	lea	edx, DWORD PTR _dwType$[esp+36]
	push	edx
	push	eax
	mov	eax, DWORD PTR _hReg$[esp+44]
	push	OFFSET ?wszParamOfLogMode@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	eax
	call	edi
	test	eax, eax
	jne	$LN19@KbdSrvQuer
	mov	eax, 4
	cmp	DWORD PTR _dwType$[esp+28], eax
	jne	$LN19@KbdSrvQuer

; 387  : 	{
; 388  : 		status = 0;
; 389  : 		goto cleanup;
; 390  : 	}
; 391  : 
; 392  : 	*wszLogFileName = (PWCHAR)HeapAlloc( GetProcessHeap(), 
; 393  : 		HEAP_ZERO_MEMORY, cbRequired );
; 394  : 
; 395  : 	if( !*wszLogFileName )
; 396  : 	{
; 397  : 		status = 0;
; 398  : 		goto cleanup;
; 399  : 	}
; 400  : 
; 401  : 	if( RegQueryValueEx( hReg,
; 402  : 		wszParamOfLogFileName, //param name
; 403  : 		0, //reserved
; 404  : 		NULL, //type not required
; 405  : 		(BYTE*)*wszLogFileName, //value of param
; 406  : 		&cbRequired ) != ERROR_SUCCESS )
; 407  : 	{
; 408  : 		status = 0;
; 409  : 		goto cleanup;
; 410  : 	}
; 411  : 
; 412  : 	if( RegQueryValueEx( hReg,
; 413  : 		wszParamOfLogMode, //param name
; 414  : 		0, //reserved
; 415  : 		&dwType, //restrict type
; 416  : 		NULL, //value of param
; 417  : 		&cbRequired ) != ERROR_SUCCESS )
; 418  : 	{
; 419  : 		status = 0;
; 420  : 		goto cleanup;
; 421  : 	}
; 422  : 
; 423  : 	if( ( dwType != REG_DWORD ) ||
; 424  : 		( cbRequired != 4 ) )

	cmp	DWORD PTR _cbRequired$[esp+28], eax
	jne	$LN19@KbdSrvQuer

; 427  : 		goto cleanup; 
; 428  : 	}
; 429  : 
; 430  : 	if( RegQueryValueEx( hReg,
; 431  : 		wszParamOfLogMode, //param name
; 432  : 		0, //reserved
; 433  : 		&dwType, //restrict type
; 434  : 		(BYTE*)LogMode, //value of param
; 435  : 		&cbRequired ) != ERROR_SUCCESS )

	mov	ebx, DWORD PTR _LogMode$[esp+24]
	mov	eax, DWORD PTR _hReg$[esp+28]
	lea	ecx, DWORD PTR _cbRequired$[esp+28]
	push	ecx
	push	ebx
	lea	edx, DWORD PTR _dwType$[esp+36]
	push	edx
	push	0
	push	OFFSET ?wszParamOfLogMode@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	eax
	call	edi
	test	eax, eax

; 481  : 
; 482  : cleanup:

	jne	SHORT $LN19@KbdSrvQuer
	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN41@KbdSrvQuer

; 436  : 	{
; 437  : 		status = 0;
; 438  : 		goto cleanup;
; 439  : 	}
; 440  : 
; 441  : 	if( *LogMode )
; 442  : 	{
; 443  : 		if( (DWORD)*LogMode != 1 )

	cmp	eax, 1
	je	SHORT $LN41@KbdSrvQuer

; 444  : 			*(PDWORD)LogMode = 1;

	mov	DWORD PTR [ebx], ebp
$LN41@KbdSrvQuer:

; 445  : 	}
; 446  : 
; 447  : 	if( RegQueryValueEx( hReg,
; 448  : 		wszParamOfHideStatus, //param name
; 449  : 		0, //reserved
; 450  : 		&dwType, //restrict type
; 451  : 		NULL, //value of param
; 452  : 		&cbRequired ) != ERROR_SUCCESS )

	mov	eax, DWORD PTR _hReg$[esp+28]
	lea	ecx, DWORD PTR _cbRequired$[esp+28]
	push	ecx
	push	0
	lea	edx, DWORD PTR _dwType$[esp+36]
	push	edx
	push	0
	push	OFFSET ?wszParamOfHideStatus@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	eax
	call	edi
	test	eax, eax

; 481  : 
; 482  : cleanup:

	jne	SHORT $LN19@KbdSrvQuer
	mov	eax, 4
	cmp	DWORD PTR _dwType$[esp+28], eax
	jne	SHORT $LN19@KbdSrvQuer

; 453  : 	{
; 454  : 		status = 0;
; 455  : 		goto cleanup;
; 456  : 	}
; 457  : 
; 458  : 	if( ( dwType != REG_DWORD ) ||
; 459  : 		( cbRequired != 4 ) )

	cmp	DWORD PTR _cbRequired$[esp+28], eax
	jne	SHORT $LN19@KbdSrvQuer

; 460  : 	{
; 461  : 		status = 0;
; 462  : 		goto cleanup; 
; 463  : 	}
; 464  : 
; 465  : 	if( RegQueryValueEx( hReg,
; 466  : 		wszParamOfHideStatus, //param name
; 467  : 		0, //reserved
; 468  : 		NULL, //required type
; 469  : 		(BYTE*)HideStatus, //value of param
; 470  : 		&cbRequired ) != ERROR_SUCCESS )

	mov	edx, DWORD PTR _hReg$[esp+28]
	lea	ecx, DWORD PTR _cbRequired$[esp+28]
	push	ecx
	push	OFFSET ?dwHideMode@@3KA			; dwHideMode
	push	0
	push	0
	push	OFFSET ?wszParamOfHideStatus@?1??KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z@4PA_WA
	push	edx
	call	edi
	test	eax, eax

; 481  : 
; 482  : cleanup:

	jne	SHORT $LN19@KbdSrvQuer
	mov	eax, DWORD PTR ?dwHideMode@@3KA		; dwHideMode
	test	eax, eax
	je	SHORT $cleanup$60162

; 471  : 	{
; 472  : 		status = 0;
; 473  : 		goto cleanup;
; 474  : 	}
; 475  : 
; 476  : 	if( *HideStatus )
; 477  : 	{
; 478  : 		if( *HideStatus != 1 )

	cmp	eax, 1
	je	SHORT $cleanup$60162

; 479  : 			*HideStatus = 1;

	mov	DWORD PTR ?dwHideMode@@3KA, ebp		; dwHideMode

; 480  : 	}

	jmp	SHORT $cleanup$60162
$LN19@KbdSrvQuer:

; 425  : 	{
; 426  : 		status = 0;

	xor	ebp, ebp
$cleanup$60162:

; 483  : 
; 484  : 	if( wszFullSrvRegPath ) HeapFree( GetProcessHeap(), 0, (PVOID)wszFullSrvRegPath );

	push	esi
	push	0
	call	DWORD PTR __imp__GetProcessHeap@0
	push	eax
	call	DWORD PTR __imp__HeapFree@12
$LN4@KbdSrvQuer:

; 485  : 	if( hReg ) RegCloseKey( hReg );

	mov	eax, DWORD PTR _hReg$[esp+28]
	test	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $LN3@KbdSrvQuer
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
$LN3@KbdSrvQuer:

; 486  : 
; 487  : 	if( !status )

	test	ebp, ebp
	jne	SHORT $LN40@KbdSrvQuer

; 488  : 	{
; 489  : 		if( *wszLogFileName ) HeapFree( GetProcessHeap(), 0, (PVOID)*wszLogFileName );

	mov	eax, DWORD PTR _wszLogFileName$[esp+12]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN40@KbdSrvQuer
	push	eax
	push	ebp
	call	DWORD PTR __imp__GetProcessHeap@0
	push	eax
	call	DWORD PTR __imp__HeapFree@12
$LN40@KbdSrvQuer:

; 490  : 	}
; 491  : 
; 492  : 	return status;

	mov	eax, ebp
	pop	ebp

; 493  : }

	add	esp, 12					; 0000000cH
	ret	0
?KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z ENDP ; KbdSrvQueryRegStartParam
_TEXT	ENDS
PUBLIC	?ReportStatusToSCMgr@@YAHKKK@Z			; ReportStatusToSCMgr
; Function compile flags: /Ogtpy
;	COMDAT ?ReportStatusToSCMgr@@YAHKKK@Z
_TEXT	SEGMENT
_dwWin32ExitCode$ = 8					; size = 4
_dwWaitHint$ = 12					; size = 4
?ReportStatusToSCMgr@@YAHKKK@Z PROC			; ReportStatusToSCMgr, COMDAT
; _dwCurrentState$ = eax

; 285  :    static DWORD dwCheckPoint = 1;
; 286  :    BOOL fResult = TRUE;
; 287  : 
; 288  :    switch( dwCurrentState )

	lea	ecx, DWORD PTR [eax-1]
	xor	edx, edx
	cmp	ecx, 6
	ja	SHORT $LN9@ReportStat
	jmp	DWORD PTR $LN13@ReportStat[ecx*4]
$LN8@ReportStat:

; 289  :    {
; 290  : 		case SERVICE_START_PENDING:
; 291  : 		case SERVICE_STOP_PENDING:
; 292  : 		case SERVICE_CONTINUE_PENDING:
; 293  : 		case SERVICE_PAUSE_PENDING:
; 294  : 			ssStatus.dwControlsAccepted = 0;

	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, edx

; 295  : 		break;

	jmp	SHORT $LN9@ReportStat
$LN7@ReportStat:

; 296  : 		case SERVICE_RUNNING:
; 297  : 			ssStatus.dwControlsAccepted = SERVICE_ACCEPT_PAUSE_CONTINUE | SERVICE_ACCEPT_STOP;

	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, 3

; 298  : 		break;

	jmp	SHORT $LN9@ReportStat
$LN5@ReportStat:

; 299  : 		case SERVICE_PAUSED:
; 300  : 			ssStatus.dwControlsAccepted = SERVICE_ACCEPT_PAUSE_CONTINUE;
; 301  : 		break;
; 302  : 		case SERVICE_STOPPED:
; 303  : 			ssStatus.dwControlsAccepted = SERVICE_ACCEPT_PAUSE_CONTINUE;

	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, 2
$LN9@ReportStat:

; 304  : 		break;
; 305  :    }
; 306  : 
; 307  :    ssStatus.dwCurrentState = dwCurrentState;
; 308  :    ssStatus.dwWin32ExitCode = dwWin32ExitCode;
; 309  :    ssStatus.dwWaitHint = dwWaitHint;
; 310  : 
; 311  :    if( ( dwCurrentState == SERVICE_RUNNING ) ||
; 312  : 	   ( dwCurrentState == SERVICE_PAUSED  ) ||
; 313  : 	   ( dwCurrentState == SERVICE_STOPPED ) )

	cmp	eax, 4
	mov	ecx, DWORD PTR _dwWin32ExitCode$[esp-4]
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+12, ecx
	mov	ecx, DWORD PTR _dwWaitHint$[esp-4]
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+4, eax
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+24, ecx
	je	SHORT $LN3@ReportStat
	cmp	eax, 7
	je	SHORT $LN3@ReportStat
	cmp	eax, 1
	je	SHORT $LN3@ReportStat

; 315  :    else
; 316  : 	   ssStatus.dwCheckPoint = dwCheckPoint++;

	mov	eax, DWORD PTR ?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA

; 317  : 
; 318  :    
; 319  : 	if ( !( fResult = SetServiceStatus( ssHandle, &ssStatus ) ) )

	mov	edx, DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A ; ssHandle
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+20, eax
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	add	eax, 1
	push	edx
	mov	DWORD PTR ?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA, eax
	call	DWORD PTR __imp__SetServiceStatus@8

; 320  : 	{
; 321  : #ifdef _DEBUG
; 322  : 		SrvDebugOut( L"service status not set (%d)", dwCurrentState );
; 323  : #endif
; 324  : 		//AddToMessageLog(TEXT("SetServiceStatus"));
; 325  :     }
; 326  :   
; 327  :    return fResult;
; 328  : }

	ret	0
$LN3@ReportStat:

; 314  : 		   ssStatus.dwCheckPoint = 0;

	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+20, edx

; 317  : 
; 318  :    
; 319  : 	if ( !( fResult = SetServiceStatus( ssHandle, &ssStatus ) ) )

	mov	edx, DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A ; ssHandle
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	push	edx
	call	DWORD PTR __imp__SetServiceStatus@8

; 320  : 	{
; 321  : #ifdef _DEBUG
; 322  : 		SrvDebugOut( L"service status not set (%d)", dwCurrentState );
; 323  : #endif
; 324  : 		//AddToMessageLog(TEXT("SetServiceStatus"));
; 325  :     }
; 326  :   
; 327  :    return fResult;
; 328  : }

	ret	0
	npad	3
$LN13@ReportStat:
	DD	$LN5@ReportStat
	DD	$LN8@ReportStat
	DD	$LN8@ReportStat
	DD	$LN7@ReportStat
	DD	$LN8@ReportStat
	DD	$LN8@ReportStat
	DD	$LN5@ReportStat
?ReportStatusToSCMgr@@YAHKKK@Z ENDP			; ReportStatusToSCMgr
_TEXT	ENDS
PUBLIC	?SrvCtrl@@YGXK@Z				; SrvCtrl
; Function compile flags: /Ogtpy
;	COMDAT ?SrvCtrl@@YGXK@Z
_TEXT	SEGMENT
_fdwControl$ = 8					; size = 4
?SrvCtrl@@YGXK@Z PROC					; SrvCtrl, COMDAT

; 229  : 	DWORD ErrCode = NO_ERROR;
; 230  : 
; 231  : 	if( dwSrvStatus == fdwControl )

	mov	eax, DWORD PTR _fdwControl$[esp-4]
	cmp	DWORD PTR ?dwSrvStatus@@3KA, eax	; dwSrvStatus
	je	$LN9@SrvCtrl

; 232  : 		return;
; 233  : 
; 234  : 	switch( fdwControl )

	add	eax, -1
	cmp	eax, 4
	ja	$LN1@SrvCtrl
	jmp	DWORD PTR $LN47@SrvCtrl[eax*4]
$LN5@SrvCtrl:

; 235  : 	{
; 236  : 		case SERVICE_CONTROL_PAUSE:
; 237  : 		{
; 238  : 			ReportStatusToSCMgr( SERVICE_PAUSE_PENDING, NO_ERROR, 9000 );

	mov	eax, DWORD PTR ?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+20, eax
	add	eax, 1
	mov	DWORD PTR ?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA, eax
	mov	eax, DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A ; ssHandle
	xor	ecx, ecx
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	push	eax
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, ecx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+4, 6
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+12, ecx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+24, 9000 ; 00002328H
	call	DWORD PTR __imp__SetServiceStatus@8

; 239  : 			//pause: log pause
; 240  : 			dwSrvStatus = SERVICE_CONTROL_PAUSE;

	mov	DWORD PTR ?dwSrvStatus@@3KA, 2		; dwSrvStatus

; 241  : 			break;

	jmp	$LN1@SrvCtrl
$LN4@SrvCtrl:

; 242  : 		}
; 243  : 		case SERVICE_CONTROL_CONTINUE:
; 244  : 		{
; 245  : 			ReportStatusToSCMgr( SERVICE_CONTINUE_PENDING, NO_ERROR, 9000 );

	mov	eax, DWORD PTR ?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA
	xor	ecx, ecx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, ecx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+12, ecx
	mov	ecx, DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A ; ssHandle
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+20, eax
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	add	eax, 1
	push	ecx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+4, 5
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+24, 9000 ; 00002328H
	mov	DWORD PTR ?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA, eax
	call	DWORD PTR __imp__SetServiceStatus@8

; 246  : 			//pause: log pause
; 247  : 			dwSrvStatus = SERVICE_CONTROL_CONTINUE;

	mov	DWORD PTR ?dwSrvStatus@@3KA, 3		; dwSrvStatus

; 248  : 			break;

	jmp	SHORT $LN1@SrvCtrl
$LN3@SrvCtrl:

; 249  : 		}
; 250  : 		case SERVICE_CONTROL_SHUTDOWN:
; 251  : 		case SERVICE_CONTROL_STOP:
; 252  : 		{
; 253  : 			ReportStatusToSCMgr( SERVICE_STOP_PENDING, NO_ERROR, 9000 );

	mov	eax, DWORD PTR ?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA
	mov	edx, DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A ; ssHandle
	xor	ecx, ecx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+20, eax
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	add	eax, 1
	push	edx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, ecx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+4, 3
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+12, ecx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+24, 9000 ; 00002328H
	mov	DWORD PTR ?dwCheckPoint@?1??ReportStatusToSCMgr@@YAHKKK@Z@4KA, eax
	call	DWORD PTR __imp__SetServiceStatus@8

; 254  : 			// stop driver: stop log and deinitialize
; 255  : 			dwSrvStatus = SERVICE_CONTROL_STOP;

	mov	DWORD PTR ?dwSrvStatus@@3KA, 1		; dwSrvStatus

; 256  : 			break;

	jmp	SHORT $LN1@SrvCtrl
$LN2@SrvCtrl:

; 257  : 		}
; 258  : 		case SERVICE_CONTROL_INTERROGATE:
; 259  : 			dwSrvStatus = ssStatus.dwCurrentState;

	mov	eax, DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+4

; 260  : 			ReportStatusToSCMgr( ssStatus.dwCurrentState, 0, 0 );

	xor	ecx, ecx
	push	ecx
	push	ecx
	mov	DWORD PTR ?dwSrvStatus@@3KA, eax	; dwSrvStatus
	call	?ReportStatusToSCMgr@@YAHKKK@Z		; ReportStatusToSCMgr
	add	esp, 8
$LN1@SrvCtrl:

; 261  : 		break;
; 262  : 
; 263  : 		default:
; 264  : 		break;
; 265  : 	}
; 266  : 
; 267  : 	SetEvent( hEventCtrlMesSend );

	mov	eax, DWORD PTR ?hEventCtrlMesSend@@3PAXA ; hEventCtrlMesSend
	mov	DWORD PTR _fdwControl$[esp-4], eax
	jmp	DWORD PTR __imp__SetEvent@4
$LN9@SrvCtrl:

; 268  : }

	ret	4
	npad	1
$LN47@SrvCtrl:
	DD	$LN3@SrvCtrl
	DD	$LN5@SrvCtrl
	DD	$LN4@SrvCtrl
	DD	$LN2@SrvCtrl
	DD	$LN3@SrvCtrl
?SrvCtrl@@YGXK@Z ENDP					; SrvCtrl
_TEXT	ENDS
PUBLIC	?ServiceMain@@YGXKPAPA_W@Z			; ServiceMain
; Function compile flags: /Ogtpy
;	COMDAT ?ServiceMain@@YGXKPAPA_W@Z
_TEXT	SEGMENT
_LogMode$ = -8						; size = 4
_wszLogFileName$ = -4					; size = 4
_dwArgc$ = 8						; size = 4
_lpszArgv$ = 12						; size = 4
?ServiceMain@@YGXKPAPA_W@Z PROC				; ServiceMain, COMDAT

; 129  : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi

; 130  : #ifdef _DEBUG
; 131  : 	DebugBreak(  );
; 132  : #endif
; 133  : 
; 134  : 	DWORD dwErrCode = NO_ERROR;

	xor	edi, edi

; 135  : 	PWSTR wszLogFileName;
; 136  : 	LOG_MODE LogMode;
; 137  : 	
; 138  : 	ssStatus.dwServiceType	= SERVICE_WIN32_OWN_PROCESS;
; 139  : 	ssStatus.dwCurrentState = SERVICE_START_PENDING;
; 140  : 	ssStatus.dwControlsAccepted = 0;
; 141  : 	ssStatus.dwWin32ExitCode = NO_ERROR;
; 142  : 	ssStatus.dwServiceSpecificExitCode = NO_ERROR;
; 143  : 	ssStatus.dwCheckPoint = 1;
; 144  : 	ssStatus.dwWaitHint = 9000;
; 145  : 	
; 146  : 	ssHandle = RegisterServiceCtrlHandler( SERVICE_NAME, SrvCtrl );

	push	OFFSET ?SrvCtrl@@YGXK@Z			; SrvCtrl
	mov	ebp, 2
	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	xor	esi, esi
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A, 16 ; 00000010H
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+4, ebp
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, edi
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+12, edi
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+16, edi
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+20, 1
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+24, 9000 ; 00002328H
	call	DWORD PTR __imp__RegisterServiceCtrlHandlerW@8

; 147  : 
; 148  : 	SetServiceStatus( ssHandle, &ssStatus );

	mov	ebx, DWORD PTR __imp__SetServiceStatus@8
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	push	eax
	mov	DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A, eax ; ssHandle
	call	ebx

; 149  : 
; 150  : 	if( !KbdSrvQueryRegStartParam( &wszLogFileName, &LogMode, &dwHideMode ) )

	lea	eax, DWORD PTR _LogMode$[esp+24]
	push	eax
	lea	ecx, DWORD PTR _wszLogFileName$[esp+28]
	push	ecx
	call	?KbdSrvQueryRegStartParam@@YAHPAPA_WPAW4_LOG_MODE@@PAK@Z ; KbdSrvQueryRegStartParam
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@ServiceMai

; 151  : 	{
; 152  : 		dwHideMode = 0;
; 153  : 		AddToMessageLog( EVENTLOG_ERROR_TYPE, MSG_INCORRECT_REG_DATA, NULL );

	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	edi
	mov	DWORD PTR ?dwHideMode@@3KA, edi		; dwHideMode
	call	DWORD PTR __imp__RegisterEventSourceW@8
	mov	esi, eax
	cmp	esi, edi
	je	SHORT $LN21@ServiceMai
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	-1073610751				; c0020001H
	push	edi
	push	1
	push	esi
	call	DWORD PTR __imp__ReportEventW@36
	test	eax, eax
	je	SHORT $LN21@ServiceMai
	push	esi
	call	DWORD PTR __imp__DeregisterEventSource@4
$LN21@ServiceMai:

; 154  : 		
; 155  : 		ReportStatusToSCMgr( SERVICE_STOPPED, ERROR_FILE_NOT_FOUND, 0 );

	mov	edx, DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A ; ssHandle
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, ebp
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+12, ebp
	push	edx

; 156  : 		return;

	jmp	$LN111@ServiceMai
$LN15@ServiceMai:

; 157  : 	}
; 158  : 
; 159  : 	dwSrvStatus = SERVICE_RUNNING;
; 160  : 
; 161  : 	if( !InitKbdHook( wszLogFileName, (LOG_MODE)LogMode ) )

	mov	eax, DWORD PTR _LogMode$[esp+24]
	mov	ecx, DWORD PTR _wszLogFileName$[esp+24]
	push	eax
	push	ecx
	mov	DWORD PTR ?dwSrvStatus@@3KA, 4		; dwSrvStatus
	call	DWORD PTR __imp_?InitKbdHook@@YGHPB_WW4_LOG_MODE@@@Z
	test	eax, eax
	jne	SHORT $LN14@ServiceMai

; 162  : 	{
; 163  : 		dwErrCode = GetLastError(  );

	call	DWORD PTR __imp__GetLastError@0
	mov	esi, eax

; 164  : 		dwSrvStatus = SERVICE_STOPPED;

	mov	DWORD PTR ?dwSrvStatus@@3KA, 1		; dwSrvStatus

; 165  : 	}
; 166  : 	else

	jmp	SHORT $LN13@ServiceMai
$LN14@ServiceMai:

; 167  : 		StartLog(  );

	call	DWORD PTR __imp_?StartLog@@YGHXZ
$LN13@ServiceMai:

; 168  : 		
; 169  : 	ReportStatusToSCMgr( dwSrvStatus, dwErrCode, 0 );

	mov	eax, DWORD PTR ?dwSrvStatus@@3KA	; dwSrvStatus
	push	edi
	push	esi
	call	?ReportStatusToSCMgr@@YAHKKK@Z		; ReportStatusToSCMgr
	add	esp, 8

; 170  : 
; 171  : 	hEventCtrlMesSend = CreateEvent( NULL, FALSE, FALSE, NULL );

	push	edi
	push	edi
	push	edi
	push	edi
	call	DWORD PTR __imp__CreateEventW@16

; 172  : 
; 173  : 	AddToMessageLog( EVENTLOG_SUCCESS, MSG_INF_ERROR_1, NULL );

	cmp	DWORD PTR ?dwHideMode@@3KA, edi		; dwHideMode
	mov	ebp, DWORD PTR __imp__ReportEventW@36
	mov	DWORD PTR ?hEventCtrlMesSend@@3PAXA, eax ; hEventCtrlMesSend
	jne	SHORT $LL12@ServiceMai
	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	edi
	call	DWORD PTR __imp__RegisterEventSourceW@8
	mov	esi, eax
	cmp	esi, edi
	je	SHORT $LN107@ServiceMai
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	1073872900				; 40020004H
	push	edi
	push	edi
	push	esi
	call	ebp
	test	eax, eax
	je	SHORT $LN107@ServiceMai
	push	esi
	call	DWORD PTR __imp__DeregisterEventSource@4
$LN107@ServiceMai:

; 174  : 	AddToMessageLog( EVENTLOG_SUCCESS, MSG_INF_ERROR_2, NULL );

	cmp	DWORD PTR ?dwHideMode@@3KA, edi		; dwHideMode
	jne	SHORT $LL12@ServiceMai
	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	edi
	call	DWORD PTR __imp__RegisterEventSourceW@8
	mov	esi, eax
	cmp	esi, edi
	je	SHORT $LL12@ServiceMai
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	1073872901				; 40020005H
	push	edi
	push	edi
$LN114@ServiceMai:
	push	esi
	call	ebp
	test	eax, eax
	je	SHORT $LL12@ServiceMai
	push	esi
	call	DWORD PTR __imp__DeregisterEventSource@4
$LL12@ServiceMai:

; 175  : 
; 176  : 	while( 1 )
; 177  : 	{
; 178  : 		WaitForSingleObject( hEventCtrlMesSend, INFINITE );

	mov	edx, DWORD PTR ?hEventCtrlMesSend@@3PAXA ; hEventCtrlMesSend
	push	-1
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8

; 179  : 		dwErrCode = NO_ERROR;
; 180  : 
; 181  : 		switch( dwSrvStatus )

	mov	eax, DWORD PTR ?dwSrvStatus@@3KA	; dwSrvStatus
	xor	esi, esi
	sub	eax, 1
	je	$LN4@ServiceMai
	sub	eax, 1
	je	SHORT $LN8@ServiceMai
	sub	eax, 1
	jne	SHORT $LL12@ServiceMai

; 189  : 				break;
; 190  : 			}
; 191  : 			case SERVICE_CONTROL_CONTINUE:
; 192  : 			{
; 193  : 				if( !StartLog(  ) )

	call	DWORD PTR __imp_?StartLog@@YGHXZ
	test	eax, eax
	jne	SHORT $LN5@ServiceMai

; 194  : 					dwErrCode = GetLastError(  );

	call	DWORD PTR __imp__GetLastError@0
	mov	esi, eax
$LN5@ServiceMai:

; 195  : 				ReportStatusToSCMgr( SERVICE_RUNNING, dwErrCode, 0 );

	mov	eax, DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A ; ssHandle
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	push	eax
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, 3
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+4, 4
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+12, esi
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+24, edi
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+20, edi
	call	ebx

; 196  : 				AddToMessageLog( EVENTLOG_INFORMATION_TYPE, MSG_INF_ERROR_2, NULL );

	cmp	DWORD PTR ?dwHideMode@@3KA, edi		; dwHideMode
	jne	SHORT $LL12@ServiceMai
	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	edi
	call	DWORD PTR __imp__RegisterEventSourceW@8
	mov	esi, eax
	cmp	esi, edi
	je	$LL12@ServiceMai
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	1073872901				; 40020005H
	push	edi
	push	4

; 211  : 				return;
; 212  : 			}
; 213  : 			default:
; 214  : 			{
; 215  : #ifdef _DEBUG
; 216  : 				SrvDebugOut( L"try using not implemented case in switch in service (%d)", 0 );
; 217  : #endif
; 218  : 				break;
; 219  : 			}
; 220  : 		}
; 221  : 		//register in event viewer
; 222  : 	}

	jmp	$LN114@ServiceMai
$LN8@ServiceMai:

; 182  : 		{
; 183  : 			case SERVICE_CONTROL_PAUSE:
; 184  : 			{
; 185  : 				if( !StopLog(  ) )

	call	DWORD PTR __imp_?StopLog@@YGHXZ
	test	eax, eax
	jne	SHORT $LN7@ServiceMai

; 186  : 					dwErrCode = GetLastError(  );

	call	DWORD PTR __imp__GetLastError@0
	mov	esi, eax
$LN7@ServiceMai:

; 187  : 				ReportStatusToSCMgr( SERVICE_PAUSED, dwErrCode, 0 );

	mov	ecx, DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A ; ssHandle
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	push	ecx
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, 2
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+4, 7
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+12, esi
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+24, edi
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+20, edi
	call	ebx

; 188  : 				AddToMessageLog( EVENTLOG_INFORMATION_TYPE, MSG_INF_ERROR_3, NULL );

	cmp	DWORD PTR ?dwHideMode@@3KA, edi		; dwHideMode
	jne	$LL12@ServiceMai
	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	edi
	call	DWORD PTR __imp__RegisterEventSourceW@8
	mov	esi, eax
	cmp	esi, edi
	je	$LL12@ServiceMai
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	1073872902				; 40020006H
	push	edi
	push	4

; 211  : 				return;
; 212  : 			}
; 213  : 			default:
; 214  : 			{
; 215  : #ifdef _DEBUG
; 216  : 				SrvDebugOut( L"try using not implemented case in switch in service (%d)", 0 );
; 217  : #endif
; 218  : 				break;
; 219  : 			}
; 220  : 		}
; 221  : 		//register in event viewer
; 222  : 	}

	jmp	$LN114@ServiceMai
$LN4@ServiceMai:

; 197  : 				break;
; 198  : 			}
; 199  : 			case SERVICE_CONTROL_STOP:
; 200  : 			{
; 201  : 				if( !StopLog(  ) )

	call	DWORD PTR __imp_?StopLog@@YGHXZ
	test	eax, eax
	jne	SHORT $LN3@ServiceMai

; 202  : 					dwErrCode = GetLastError(  );

	call	DWORD PTR __imp__GetLastError@0
	mov	esi, eax

; 203  : 				else

	jmp	SHORT $LN2@ServiceMai
$LN3@ServiceMai:

; 204  : 					UnInitKbdHook(  );

	call	DWORD PTR __imp_?UnInitKbdHook@@YGHXZ
$LN2@ServiceMai:

; 205  : 
; 206  : 				AddToMessageLog( EVENTLOG_INFORMATION_TYPE, MSG_INF_ERROR_3, NULL );

	cmp	DWORD PTR ?dwHideMode@@3KA, edi		; dwHideMode
	jne	SHORT $LN87@ServiceMai
	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	edi
	call	DWORD PTR __imp__RegisterEventSourceW@8
	mov	ebx, eax
	cmp	ebx, edi
	je	SHORT $LN82@ServiceMai
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	1073872902				; 40020006H
	push	edi
	push	4
	push	ebx
	call	ebp
	test	eax, eax
	je	SHORT $LN82@ServiceMai
	push	ebx
	call	DWORD PTR __imp__DeregisterEventSource@4
$LN82@ServiceMai:

; 207  : 				AddToMessageLog( EVENTLOG_INFORMATION_TYPE, MSG_INF_ERROR_4, NULL );	

	cmp	DWORD PTR ?dwHideMode@@3KA, edi		; dwHideMode
	jne	SHORT $LN109@ServiceMai
	push	OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	push	edi
	call	DWORD PTR __imp__RegisterEventSourceW@8
	mov	ebx, eax
	cmp	ebx, edi
	je	SHORT $LN109@ServiceMai
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	1073872903				; 40020007H
	push	edi
	push	4
	push	ebx
	call	ebp
	test	eax, eax
	je	SHORT $LN109@ServiceMai
	push	ebx
	call	DWORD PTR __imp__DeregisterEventSource@4
$LN109@ServiceMai:
	mov	ebx, DWORD PTR __imp__SetServiceStatus@8
$LN87@ServiceMai:

; 208  : 
; 209  : 				CloseHandle( hEventCtrlMesSend );

	mov	edx, DWORD PTR ?hEventCtrlMesSend@@3PAXA ; hEventCtrlMesSend
	push	edx
	call	DWORD PTR __imp__CloseHandle@4

; 210  : 				ReportStatusToSCMgr( SERVICE_STOPPED, dwErrCode, 0 );

	mov	eax, DWORD PTR ?ssHandle@@3PAUSERVICE_STATUS_HANDLE__@@A ; ssHandle
	push	OFFSET ?ssStatus@@3U_SERVICE_STATUS@@A	; ssStatus
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+8, 2
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+12, esi
	push	eax
$LN111@ServiceMai:
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+4, 1
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+24, edi
	mov	DWORD PTR ?ssStatus@@3U_SERVICE_STATUS@@A+20, edi
	call	ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 223  : 
; 224  : 	HeapFree( GetProcessHeap(), 0, wszLogFileName );
; 225  : }

	add	esp, 8
	ret	8
?ServiceMain@@YGXKPAPA_W@Z ENDP				; ServiceMain
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?KbdSrvDispatchCmdArgs@@YA?AW4START_STATUS@@PB_W@Z ; KbdSrvDispatchCmdArgs
; Function compile flags: /Ogtpy
;	COMDAT ?KbdSrvDispatchCmdArgs@@YA?AW4START_STATUS@@PB_W@Z
_TEXT	SEGMENT
_hKey$ = -872						; size = 4
_dwDeleteFlag$ = -868					; size = 4
_wszDependOnService$ = -864				; size = 18
_wszDriverName$ = -844					; size = 16
_wszSystemDriverDir$ = -828				; size = 36
_wszDisplayDriverName$ = -792				; size = 46
_wszRegDriverPath$ = -744				; size = 84
_wszEventSource$ = -656					; size = 132
_wszPath$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
?KbdSrvDispatchCmdArgs@@YA?AW4START_STATUS@@PB_W@Z PROC	; KbdSrvDispatchCmdArgs, COMDAT
; _wszArg$ = ecx

; 674  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 876				; 0000036cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+876], eax

; 675  : 	WCHAR wszDriverName[] = L"kbdhook";

	mov	eax, DWORD PTR ??_C@_1BA@OIEHDFHN@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AA?$AA@
	push	ebx
	push	esi
	mov	ebx, ecx
	mov	ecx, DWORD PTR ??_C@_1BA@OIEHDFHN@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AA?$AA@+4
	push	edi
	mov	DWORD PTR _wszDriverName$[esp+892], ecx
	mov	edx, DWORD PTR ??_C@_1BA@OIEHDFHN@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AA?$AA@+8

; 676  : 	WCHAR wszDisplayDriverName[] = L"Keyboard Filter Driver";

	mov	ecx, 11					; 0000000bH
	mov	esi, OFFSET ??_C@_1CO@PNLGHGLP@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@
	lea	edi, DWORD PTR _wszDisplayDriverName$[esp+888]
	rep movsd
	movsw

; 677  : 	WCHAR wszSystemDriverDir[] = L"System32\\Drivers\\";

	mov	ecx, 9
	mov	esi, OFFSET ??_C@_1CE@GJFMKGAN@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA3?$AA2?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AA?$AA@
	lea	edi, DWORD PTR _wszSystemDriverDir$[esp+888]
	rep movsd
	mov	DWORD PTR _wszDriverName$[esp+888], eax
	mov	eax, DWORD PTR ??_C@_1BA@OIEHDFHN@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AA?$AA@+12

; 678  : 	WCHAR wszPath[256];
; 679  : 	DWORD dwStatus;
; 680  : 	WCHAR wszDependOnService[] = 
; 681  : 	{ L'k', L'b', L'd', L'h', L'o', L'o', L'k', L'\0', L'\0' }; // L"kbdhook";

	mov	ecx, 107				; 0000006bH
	mov	WORD PTR _wszDependOnService$[esp+888], cx
	mov	WORD PTR _wszDependOnService$[esp+900], cx
	mov	DWORD PTR _wszDriverName$[esp+900], eax
	mov	eax, 111				; 0000006fH

; 682  : 	WCHAR wszEventSource[] = L"SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\kbdhooksrv";

	mov	ecx, 33					; 00000021H
	mov	esi, OFFSET ??_C@_1IE@MMBDDIDB@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@
	lea	edi, DWORD PTR _wszEventSource$[esp+888]
	rep movsd
	mov	WORD PTR _wszDependOnService$[esp+896], ax
	mov	WORD PTR _wszDependOnService$[esp+898], ax
	xor	eax, eax

; 683  : 	WCHAR wszRegDriverPath[] = L"SYSTEM\\CurrentControlSet\\Services\\kbdhook";

	mov	ecx, 21					; 00000015H
	mov	esi, OFFSET ??_C@_1FE@NNBCKJOO@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe@
	lea	edi, DWORD PTR _wszRegDriverPath$[esp+888]

; 684  : 	HKEY hKey;
; 685  : 	DWORD dwDeleteFlag = 1;
; 686  : 
; 687  : 	if( lstrcmpiW( wszArg, L"install_driver" ) == 0 )

	push	OFFSET ??_C@_1BO@BLMCGMML@?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@
	rep movsd
	mov	esi, DWORD PTR __imp__lstrcmpiW@8
	push	ebx
	mov	DWORD PTR _wszDriverName$[esp+904], edx
	mov	WORD PTR _wszDependOnService$[esp+898], 98 ; 00000062H
	mov	WORD PTR _wszDependOnService$[esp+900], 100 ; 00000064H
	mov	WORD PTR _wszDependOnService$[esp+902], 104 ; 00000068H
	mov	WORD PTR _wszDependOnService$[esp+910], ax
	mov	WORD PTR _wszDependOnService$[esp+912], ax
	mov	DWORD PTR _dwDeleteFlag$[esp+896], 1
	call	esi
	test	eax, eax
	jne	SHORT $LN28@KbdSrvDisp

; 688  : 	{
; 689  : 		lstrcpyW( wszPath, wszSystemDriverDir );

	lea	ecx, DWORD PTR _wszSystemDriverDir$[esp+888]
	push	ecx
	lea	edx, DWORD PTR _wszPath$[esp+892]
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8

; 690  : 		lstrcatW( wszPath, wszDriverName );

	mov	esi, DWORD PTR __imp__lstrcatW@8
	lea	eax, DWORD PTR _wszDriverName$[esp+888]
	push	eax
	lea	ecx, DWORD PTR _wszPath$[esp+892]
	push	ecx
	call	esi

; 691  : 		lstrcatW( wszPath, L".sys" );

	push	OFFSET ??_C@_19DKJJGBOC@?$AA?4?$AAs?$AAy?$AAs?$AA?$AA@
	lea	edx, DWORD PTR _wszPath$[esp+892]
	push	edx
	call	esi

; 692  : 		
; 693  : 		dwStatus = InstallService( wszPath, wszDriverName, wszDisplayDriverName, 
; 694  : 			SERVICE_KERNEL_DRIVER, SERVICE_SYSTEM_START, 
; 695  : 			SERVICE_ERROR_NORMAL, L"Filter", L"Kbdclass", NULL );

	push	OFFSET ??_C@_1O@FIAKOBIM@?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AA@
	push	1
	push	1
	lea	eax, DWORD PTR _wszDisplayDriverName$[esp+900]
	push	eax
	lea	ecx, DWORD PTR _wszPath$[esp+904]
	push	ecx
	xor	edx, edx
	mov	ecx, OFFSET ??_C@_1BC@IIEEBBFE@?$AAK?$AAb?$AAd?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$AA@
	lea	ebx, DWORD PTR _wszDriverName$[esp+908]
	call	?InstallService@@YAHPB_W00KKK00PA_W@Z	; InstallService
	add	esp, 20					; 00000014H

; 696  : 
; 697  : 		if( dwStatus ) return ControlSuccess;

	neg	eax
	sbb	eax, eax
	add	eax, 1

; 767  : 			return ControlSuccess;
; 768  : 		else
; 769  : 			return ControlFailed;
; 770  : 	}
; 771  : 	
; 772  : 	return NoValidParam;
; 773  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+876]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN28@KbdSrvDisp:

; 698  : 		else return ControlFailed;
; 699  : 
; 700  : 	}
; 701  : 	else if( lstrcmpiW( wszArg, L"remove_driver" ) == 0 )

	push	OFFSET ??_C@_1BM@ELDDFEIE@?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AA@
	push	ebx
	call	esi
	test	eax, eax
	jne	SHORT $LN24@KbdSrvDisp

; 702  : 	{
; 703  : 		if( RegOpenKeyEx( HKEY_LOCAL_MACHINE, wszRegDriverPath, 
; 704  : 			0, KEY_SET_VALUE, &hKey ) != ERROR_SUCCESS )

	lea	edx, DWORD PTR _hKey$[esp+888]
	push	edx
	push	2
	push	eax
	lea	eax, DWORD PTR _wszRegDriverPath$[esp+900]
	push	eax
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegOpenKeyExW@20
	test	eax, eax
	je	SHORT $LN23@KbdSrvDisp

; 705  : 				return ControlFailed;

	mov	eax, 1

; 767  : 			return ControlSuccess;
; 768  : 		else
; 769  : 			return ControlFailed;
; 770  : 	}
; 771  : 	
; 772  : 	return NoValidParam;
; 773  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+876]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@KbdSrvDisp:

; 706  : 
; 707  : 		RegSetValueEx( hKey, L"DeleteFlag", 0, REG_DWORD, (BYTE*)&dwDeleteFlag, sizeof( DWORD ) );

	mov	edx, DWORD PTR _hKey$[esp+888]
	push	4
	lea	ecx, DWORD PTR _dwDeleteFlag$[esp+892]
	push	ecx
	push	4
	push	0
	push	OFFSET ??_C@_1BG@EPBGMJAB@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AAF?$AAl?$AAa?$AAg?$AA?$AA@
	push	edx
	call	DWORD PTR __imp__RegSetValueExW@24

; 708  : 		RegCloseKey( hKey );

	mov	eax, DWORD PTR _hKey$[esp+888]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4

; 709  : 
; 710  : 		return ControlSuccess;

	xor	eax, eax

; 767  : 			return ControlSuccess;
; 768  : 		else
; 769  : 			return ControlFailed;
; 770  : 	}
; 771  : 	
; 772  : 	return NoValidParam;
; 773  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+876]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@KbdSrvDisp:

; 711  : 	}
; 712  : 	else if( lstrcmpiW( wszArg, L"install_service" ) == 0 )

	push	OFFSET ??_C@_1CA@JKPMOCMB@?$AAi?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
	push	ebx
	call	esi
	test	eax, eax
	jne	SHORT $LN21@KbdSrvDisp

; 713  : 	{
; 714  : 		if( !GetSrvInstallDir( wszPath, 256 ) )

	lea	ecx, DWORD PTR _wszPath$[esp+888]
	call	?GetSrvInstallDir@@YAHPA_WK@Z		; GetSrvInstallDir
	test	eax, eax
	jne	SHORT $LN20@KbdSrvDisp

; 715  : 		{
; 716  : 			__asm nop

	npad	1
$LN20@KbdSrvDisp:

; 717  : #ifdef _DEBUG
; 718  : 			SrvDebugOut( L"GetSrvInstallDir failed %d", 0 );
; 719  : #endif
; 720  : 		}
; 721  : 
; 722  : 		lstrcatW( wszPath, L"kbdhooksrv.exe" );

	push	OFFSET ??_C@_1BO@IKAAMAIJ@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@
	lea	ecx, DWORD PTR _wszPath$[esp+892]
	push	ecx
	call	DWORD PTR __imp__lstrcatW@8

; 723  : 
; 724  : 		dwStatus = InstallService( wszPath, L"kbdhooksrv", L"Keyboard Filter Driver Service",
; 725  : 			SERVICE_WIN32_OWN_PROCESS | SERVICE_INTERACTIVE_PROCESS, SERVICE_AUTO_START, SERVICE_ERROR_NORMAL,
; 726  : 			NULL, wszDependOnService, L"Keyboard Log Service On-Access Keyboard Filter Driver" );

	push	0
	push	2
	push	272					; 00000110H
	lea	edx, DWORD PTR _wszPath$[esp+900]
	push	OFFSET ??_C@_1DO@EAMPBGHN@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
	push	edx
	mov	edx, OFFSET ??_C@_1GM@MODJIGF@?$AAK?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAL?$AAo?$AAg?$AA?5?$AAS?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAO?$AAn?$AA?9?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAK@
	lea	ecx, DWORD PTR _wszDependOnService$[esp+908]
	mov	ebx, OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	call	?InstallService@@YAHPB_W00KKK00PA_W@Z	; InstallService
	add	esp, 20					; 00000014H

; 727  : 
; 728  : 		if( dwStatus )

	neg	eax
	sbb	eax, eax
	add	eax, 1

; 767  : 			return ControlSuccess;
; 768  : 		else
; 769  : 			return ControlFailed;
; 770  : 	}
; 771  : 	
; 772  : 	return NoValidParam;
; 773  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+876]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@KbdSrvDisp:

; 729  : 			return ControlSuccess;
; 730  : 		else
; 731  : 			return ControlFailed;
; 732  : 	}
; 733  : 	else if( lstrcmpiW( wszArg, L"remove_service" ) == 0 )

	push	OFFSET ??_C@_1BO@MFBPFJGE@?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AA_?$AAs?$AAe?$AAr?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
	push	ebx
	call	esi
	test	eax, eax
	jne	SHORT $LN16@KbdSrvDisp

; 734  : 	{
; 735  : 		dwStatus = RemoveService( L"kbdhooksrv" );

	call	?RemoveService@@YAHPB_W@Z		; RemoveService

; 736  : 
; 737  : 		if( dwStatus ) return ControlSuccess;

	neg	eax
	sbb	eax, eax
	add	eax, 1

; 767  : 			return ControlSuccess;
; 768  : 		else
; 769  : 			return ControlFailed;
; 770  : 	}
; 771  : 	
; 772  : 	return NoValidParam;
; 773  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+876]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@KbdSrvDisp:

; 738  : 		else return ControlFailed;
; 739  : 	}
; 740  : 	else if( lstrcmpiW( wszArg, L"register_source" ) == 0 )

	push	OFFSET ??_C@_1CA@GIIKAIKM@?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
	push	ebx
	call	esi
	test	eax, eax
	jne	SHORT $LN12@KbdSrvDisp

; 741  : 	{
; 742  : 		if( !GetSrvInstallDir( wszPath, 256 ) )

	lea	ecx, DWORD PTR _wszPath$[esp+888]
	call	?GetSrvInstallDir@@YAHPA_WK@Z		; GetSrvInstallDir
	test	eax, eax
	jne	SHORT $LN11@KbdSrvDisp

; 743  : 		{
; 744  : 			__asm nop

	npad	1
$LN11@KbdSrvDisp:

; 745  : #ifdef _DEBUG
; 746  : 			SrvDebugOut( L"GetSrvInstallDir failed %d", 0 );
; 747  : #endif
; 748  : 		}
; 749  : 
; 750  : 		lstrcatW( wszPath, L"kbdhookmsgs.dll" );

	push	OFFSET ??_C@_1CA@KKBLPDAK@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAm?$AAs?$AAg?$AAs?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	lea	eax, DWORD PTR _wszPath$[esp+892]
	push	eax
	call	DWORD PTR __imp__lstrcatW@8

; 751  : 		
; 752  : 		dwStatus = AddEventSource( wszPath );

	lea	ebx, DWORD PTR _wszPath$[esp+888]
	call	?AddEventSource@@YAHPA_W@Z		; AddEventSource

; 753  : 
; 754  : 		if( dwStatus ) return ControlSuccess;

	neg	eax
	sbb	eax, eax
	add	eax, 1

; 767  : 			return ControlSuccess;
; 768  : 		else
; 769  : 			return ControlFailed;
; 770  : 	}
; 771  : 	
; 772  : 	return NoValidParam;
; 773  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+876]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@KbdSrvDisp:

; 755  : 		else return ControlFailed;
; 756  : 	}
; 757  : 	else if( lstrcmpiW( wszArg, L"unregister_source" ) == 0 )

	push	OFFSET ??_C@_1CE@IEJJHKAO@?$AAu?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
	push	ebx
	call	esi
	test	eax, eax
	jne	SHORT $LN7@KbdSrvDisp

; 758  : 	{
; 759  : 		if( RegDeleteKey( HKEY_LOCAL_MACHINE, wszEventSource ) == ERROR_SUCCESS )

	lea	ecx, DWORD PTR _wszEventSource$[esp+888]
	push	ecx
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegDeleteKeyW@8
	neg	eax
	sbb	eax, eax
	neg	eax

; 767  : 			return ControlSuccess;
; 768  : 		else
; 769  : 			return ControlFailed;
; 770  : 	}
; 771  : 	
; 772  : 	return NoValidParam;
; 773  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+876]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@KbdSrvDisp:

; 760  : 			return ControlSuccess;
; 761  : 		else
; 762  : 			return ControlFailed;
; 763  : 	}
; 764  : 	else if( lstrcmpiW( wszArg, L"check_admin" ) == 0 )

	push	OFFSET ??_C@_1BI@OIGJAMPI@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA_?$AAa?$AAd?$AAm?$AAi?$AAn?$AA?$AA@
	push	ebx
	call	esi
	test	eax, eax
	jne	SHORT $LN1@KbdSrvDisp

; 765  : 	{
; 766  : 		if( IsUserAdmin(  ) )

	call	?IsUserAdmin@@YAHXZ			; IsUserAdmin
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 767  : 			return ControlSuccess;
; 768  : 		else
; 769  : 			return ControlFailed;
; 770  : 	}
; 771  : 	
; 772  : 	return NoValidParam;
; 773  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+876]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1@KbdSrvDisp:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+888]
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	mov	eax, 2
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?KbdSrvDispatchCmdArgs@@YA?AW4START_STATUS@@PB_W@Z ENDP	; KbdSrvDispatchCmdArgs
_TEXT	ENDS
PUBLIC	_wmain
; Function compile flags: /Ogtpy
;	COMDAT _wmain
_TEXT	SEGMENT
_ServiceTable$ = -16					; size = 16
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 73   : {

	sub	esp, 16					; 00000010H

; 74   : 	SERVICE_TABLE_ENTRYW ServiceTable[] = 
; 75   : 	{ { SERVICE_NAME, ServiceMain },
; 76   : 	  { NULL, NULL }
; 77   : 	};
; 78   : 	DWORD LogMode;
; 79   : 	DWORD HideStatus;
; 80   : 
; 81   : 	if( ( argc > 1 ) && 
; 82   : 		( ( *argv[1] == L'-' ) || ( *argv[1] == L'/' ) ) )

	mov	edx, DWORD PTR _argc$[esp+12]
	push	esi
	push	edi
	xor	edi, edi
	cmp	edx, 1
	mov	DWORD PTR _ServiceTable$[esp+24], OFFSET ??_C@_1BG@FFCOANIM@?$AAk?$AAb?$AAd?$AAh?$AAo?$AAo?$AAk?$AAs?$AAr?$AAv?$AA?$AA@
	mov	DWORD PTR _ServiceTable$[esp+28], OFFSET ?ServiceMain@@YGXKPAPA_W@Z ; ServiceMain
	mov	DWORD PTR _ServiceTable$[esp+32], edi
	mov	DWORD PTR _ServiceTable$[esp+36], edi
	jle	$LN5@wmain
	mov	esi, DWORD PTR _argv$[esp+20]
	mov	ecx, DWORD PTR [esi+4]
	movzx	eax, WORD PTR [ecx]
	cmp	ax, 45					; 0000002dH
	je	SHORT $LN11@wmain
	cmp	ax, 47					; 0000002fH
	jne	$LN5@wmain
$LN11@wmain:

; 83   : 	{
; 84   : 		if( argc == 5 && lstrcmpiW( argv[1] + 1, L"create_param" ) == 0 )

	cmp	edx, 5
	jne	SHORT $LN10@wmain
	push	OFFSET ??_C@_1BK@NKJDKGAH@?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA_?$AAp?$AAa?$AAr?$AAa?$AAm?$AA?$AA@
	add	ecx, 2
	push	ecx
	call	DWORD PTR __imp__lstrcmpiW@8
	test	eax, eax
	jne	SHORT $LN10@wmain

; 85   : 		{
; 86   : 			LogMode = _wtoi( argv[3] );

	mov	eax, DWORD PTR [esi+12]
	push	eax
	call	__wtoi

; 87   : 			HideStatus = _wtoi( argv[4] );

	mov	ecx, DWORD PTR [esi+16]
	push	ecx
	mov	edi, eax
	call	__wtoi

; 88   : 
; 89   : 			if( CreateParametersForService( argv[2], HideStatus, (LOG_MODE)LogMode ) )

	mov	ecx, DWORD PTR [esi+8]
	push	edi
	push	eax
	call	?CreateParametersForService@@YAHPA_WKW4_LOG_MODE@@@Z ; CreateParametersForService
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN9@wmain
$LN3@wmain:

; 90   : 			{
; 91   : 				wprintf( L"success\n" );

	push	OFFSET ??_C@_1BC@EGFPMFNB@?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?6?$AA?$AA@
	call	_wprintf
	add	esp, 4
	pop	edi

; 118  : 	{
; 119  : #ifdef _DEBUG
; 120  : 		SrvDebugOut( L"Kbd hook srv (%d)\n",
; 121  : 			GetLastError(  ));
; 122  : #endif
; 123  : 	}
; 124  : 
; 125  : 	return 0;

	xor	eax, eax
	pop	esi

; 126  : }

	add	esp, 16					; 00000010H
	ret	0
$LN9@wmain:

; 92   : 				return 0;
; 93   : 			}
; 94   : 			else
; 95   : 			{
; 96   : 				wprintf( L"error occur\n" );

	push	OFFSET ??_C@_1BK@JHBDMOKK@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAc?$AAc?$AAu?$AAr?$AA?6?$AA?$AA@
	call	_wprintf
	add	esp, 4
	pop	edi

; 97   : 				return 1;

	mov	eax, 1
	pop	esi

; 126  : }

	add	esp, 16					; 00000010H
	ret	0
$LN10@wmain:

; 98   : 			}
; 99   : 		}
; 100  : 		else
; 101  : 		{
; 102  : 			switch( KbdSrvDispatchCmdArgs( argv[1] + 1 ) )

	mov	ecx, DWORD PTR [esi+4]
	add	ecx, 2
	call	?KbdSrvDispatchCmdArgs@@YA?AW4START_STATUS@@PB_W@Z ; KbdSrvDispatchCmdArgs
	sub	eax, edi
	je	SHORT $LN3@wmain
	sub	eax, 1
	je	SHORT $LN9@wmain
	sub	eax, 1
	jne	SHORT $LN5@wmain

; 103  : 			{
; 104  : 				case ControlFailed:
; 105  : 					wprintf( L"error occur\n" );
; 106  : 				return 1;
; 107  : 				case ControlSuccess:
; 108  : 					wprintf( L"success\n" );
; 109  : 				return 0;
; 110  : 				case NoValidParam:
; 111  : 					KbdSrvPrintUsage(  );

	call	?KbdSrvPrintUsage@@YAXXZ		; KbdSrvPrintUsage
	pop	edi

; 112  : 				return 1;

	mov	eax, 1
	pop	esi

; 126  : }

	add	esp, 16					; 00000010H
	ret	0
$LN5@wmain:

; 113  : 			}
; 114  : 		}
; 115  : 	}
; 116  : 
; 117  : 	if( !StartServiceCtrlDispatcher( (SERVICE_TABLE_ENTRYW*)&ServiceTable ) )

	lea	edx, DWORD PTR _ServiceTable$[esp+24]
	push	edx
	call	DWORD PTR __imp__StartServiceCtrlDispatcherW@4
	pop	edi

; 118  : 	{
; 119  : #ifdef _DEBUG
; 120  : 		SrvDebugOut( L"Kbd hook srv (%d)\n",
; 121  : 			GetLastError(  ));
; 122  : #endif
; 123  : 	}
; 124  : 
; 125  : 	return 0;

	xor	eax, eax
	pop	esi

; 126  : }

	add	esp, 16					; 00000010H
	ret	0
_wmain	ENDP
_TEXT	ENDS
END
